
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model Property
 * 
 */
export type Property = $Result.DefaultSelection<Prisma.$PropertyPayload>
/**
 * Model Vehicle
 * 
 */
export type Vehicle = $Result.DefaultSelection<Prisma.$VehiclePayload>
/**
 * Model Land
 * 
 */
export type Land = $Result.DefaultSelection<Prisma.$LandPayload>
/**
 * Model House
 * 
 */
export type House = $Result.DefaultSelection<Prisma.$HousePayload>
/**
 * Model Broker
 * 
 */
export type Broker = $Result.DefaultSelection<Prisma.$BrokerPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const PropertyType: {
  Land: 'Land',
  House: 'House',
  Vehicle: 'Vehicle'
};

export type PropertyType = (typeof PropertyType)[keyof typeof PropertyType]


export const Condition: {
  New: 'New',
  Used: 'Used'
};

export type Condition = (typeof Condition)[keyof typeof Condition]

}

export type PropertyType = $Enums.PropertyType

export const PropertyType: typeof $Enums.PropertyType

export type Condition = $Enums.Condition

export const Condition: typeof $Enums.Condition

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.property`: Exposes CRUD operations for the **Property** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Properties
    * const properties = await prisma.property.findMany()
    * ```
    */
  get property(): Prisma.PropertyDelegate<ExtArgs>;

  /**
   * `prisma.vehicle`: Exposes CRUD operations for the **Vehicle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vehicles
    * const vehicles = await prisma.vehicle.findMany()
    * ```
    */
  get vehicle(): Prisma.VehicleDelegate<ExtArgs>;

  /**
   * `prisma.land`: Exposes CRUD operations for the **Land** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lands
    * const lands = await prisma.land.findMany()
    * ```
    */
  get land(): Prisma.LandDelegate<ExtArgs>;

  /**
   * `prisma.house`: Exposes CRUD operations for the **House** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Houses
    * const houses = await prisma.house.findMany()
    * ```
    */
  get house(): Prisma.HouseDelegate<ExtArgs>;

  /**
   * `prisma.broker`: Exposes CRUD operations for the **Broker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brokers
    * const brokers = await prisma.broker.findMany()
    * ```
    */
  get broker(): Prisma.BrokerDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    Property: 'Property',
    Vehicle: 'Vehicle',
    Land: 'Land',
    House: 'House',
    Broker: 'Broker'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'property' | 'vehicle' | 'land' | 'house' | 'broker'
      txIsolationLevel: never
    },
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.usersFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.usersAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Property: {
        payload: Prisma.$PropertyPayload<ExtArgs>
        fields: Prisma.PropertyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PropertyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PropertyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          findFirst: {
            args: Prisma.PropertyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PropertyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          findMany: {
            args: Prisma.PropertyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>[]
          }
          create: {
            args: Prisma.PropertyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          createMany: {
            args: Prisma.PropertyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PropertyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          update: {
            args: Prisma.PropertyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          deleteMany: {
            args: Prisma.PropertyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PropertyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PropertyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          aggregate: {
            args: Prisma.PropertyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProperty>
          }
          groupBy: {
            args: Prisma.PropertyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PropertyGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.PropertyFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.PropertyAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.PropertyCountArgs<ExtArgs>,
            result: $Utils.Optional<PropertyCountAggregateOutputType> | number
          }
        }
      }
      Vehicle: {
        payload: Prisma.$VehiclePayload<ExtArgs>
        fields: Prisma.VehicleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VehicleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VehicleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          findFirst: {
            args: Prisma.VehicleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VehicleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          findMany: {
            args: Prisma.VehicleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>[]
          }
          create: {
            args: Prisma.VehicleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          createMany: {
            args: Prisma.VehicleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VehicleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          update: {
            args: Prisma.VehicleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          deleteMany: {
            args: Prisma.VehicleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VehicleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VehicleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          aggregate: {
            args: Prisma.VehicleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVehicle>
          }
          groupBy: {
            args: Prisma.VehicleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VehicleGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.VehicleFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.VehicleAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.VehicleCountArgs<ExtArgs>,
            result: $Utils.Optional<VehicleCountAggregateOutputType> | number
          }
        }
      }
      Land: {
        payload: Prisma.$LandPayload<ExtArgs>
        fields: Prisma.LandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LandFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LandFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LandPayload>
          }
          findFirst: {
            args: Prisma.LandFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LandFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LandPayload>
          }
          findMany: {
            args: Prisma.LandFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LandPayload>[]
          }
          create: {
            args: Prisma.LandCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LandPayload>
          }
          createMany: {
            args: Prisma.LandCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LandDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LandPayload>
          }
          update: {
            args: Prisma.LandUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LandPayload>
          }
          deleteMany: {
            args: Prisma.LandDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LandUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LandUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LandPayload>
          }
          aggregate: {
            args: Prisma.LandAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLand>
          }
          groupBy: {
            args: Prisma.LandGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LandGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.LandFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.LandAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.LandCountArgs<ExtArgs>,
            result: $Utils.Optional<LandCountAggregateOutputType> | number
          }
        }
      }
      House: {
        payload: Prisma.$HousePayload<ExtArgs>
        fields: Prisma.HouseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HouseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HousePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HouseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HousePayload>
          }
          findFirst: {
            args: Prisma.HouseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HousePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HouseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HousePayload>
          }
          findMany: {
            args: Prisma.HouseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HousePayload>[]
          }
          create: {
            args: Prisma.HouseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HousePayload>
          }
          createMany: {
            args: Prisma.HouseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HouseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HousePayload>
          }
          update: {
            args: Prisma.HouseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HousePayload>
          }
          deleteMany: {
            args: Prisma.HouseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HouseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HouseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HousePayload>
          }
          aggregate: {
            args: Prisma.HouseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHouse>
          }
          groupBy: {
            args: Prisma.HouseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HouseGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.HouseFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.HouseAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.HouseCountArgs<ExtArgs>,
            result: $Utils.Optional<HouseCountAggregateOutputType> | number
          }
        }
      }
      Broker: {
        payload: Prisma.$BrokerPayload<ExtArgs>
        fields: Prisma.BrokerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrokerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrokerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          findFirst: {
            args: Prisma.BrokerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrokerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          findMany: {
            args: Prisma.BrokerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>[]
          }
          create: {
            args: Prisma.BrokerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          createMany: {
            args: Prisma.BrokerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BrokerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          update: {
            args: Prisma.BrokerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          deleteMany: {
            args: Prisma.BrokerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BrokerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BrokerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BrokerPayload>
          }
          aggregate: {
            args: Prisma.BrokerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBroker>
          }
          groupBy: {
            args: Prisma.BrokerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BrokerGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.BrokerFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.BrokerAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.BrokerCountArgs<ExtArgs>,
            result: $Utils.Optional<BrokerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    properties_owned: number
    properties_sell: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    properties_owned?: boolean | UsersCountOutputTypeCountProperties_ownedArgs
    properties_sell?: boolean | UsersCountOutputTypeCountProperties_sellArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountProperties_ownedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountProperties_sellArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyWhereInput
  }


  /**
   * Count Type BrokerCountOutputType
   */

  export type BrokerCountOutputType = {
    propertiesListed: number
  }

  export type BrokerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    propertiesListed?: boolean | BrokerCountOutputTypeCountPropertiesListedArgs
  }

  // Custom InputTypes
  /**
   * BrokerCountOutputType without action
   */
  export type BrokerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrokerCountOutputType
     */
    select?: BrokerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrokerCountOutputType without action
   */
  export type BrokerCountOutputTypeCountPropertiesListedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyWhereInput
  }


  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    location: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    location: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    firstName: number
    lastName: number
    email: number
    password: number
    phoneNumber: number
    location: number
    description: number
    createdAt: number
    updatedAt: number
    favResidencieID: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    phoneNumber?: true
    location?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    phoneNumber?: true
    location?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    phoneNumber?: true
    location?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    favResidencieID?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    username: string
    firstName: string | null
    lastName: string | null
    email: string
    password: string
    phoneNumber: string | null
    location: string | null
    description: string | null
    createdAt: Date
    updatedAt: Date
    favResidencieID: string[]
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    location?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    favResidencieID?: boolean
    properties_owned?: boolean | users$properties_ownedArgs<ExtArgs>
    properties_sell?: boolean | users$properties_sellArgs<ExtArgs>
    broker?: boolean | users$brokerArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    location?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    favResidencieID?: boolean
  }


  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    properties_owned?: boolean | users$properties_ownedArgs<ExtArgs>
    properties_sell?: boolean | users$properties_sellArgs<ExtArgs>
    broker?: boolean | users$brokerArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      properties_owned: Prisma.$PropertyPayload<ExtArgs>[]
      properties_sell: Prisma.$PropertyPayload<ExtArgs>[]
      broker: Prisma.$BrokerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      firstName: string | null
      lastName: string | null
      email: string
      password: string
      phoneNumber: string | null
      location: string | null
      description: string | null
      createdAt: Date
      updatedAt: Date
      favResidencieID: string[]
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {usersFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const users = await prisma.users.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: usersFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Users.
     * @param {usersAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const users = await prisma.users.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: usersAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    properties_owned<T extends users$properties_ownedArgs<ExtArgs> = {}>(args?: Subset<T, users$properties_ownedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findMany'> | Null>;

    properties_sell<T extends users$properties_sellArgs<ExtArgs> = {}>(args?: Subset<T, users$properties_sellArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findMany'> | Null>;

    broker<T extends users$brokerArgs<ExtArgs> = {}>(args?: Subset<T, users$brokerArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'String'>
    readonly username: FieldRef<"users", 'String'>
    readonly firstName: FieldRef<"users", 'String'>
    readonly lastName: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly phoneNumber: FieldRef<"users", 'String'>
    readonly location: FieldRef<"users", 'String'>
    readonly description: FieldRef<"users", 'String'>
    readonly createdAt: FieldRef<"users", 'DateTime'>
    readonly updatedAt: FieldRef<"users", 'DateTime'>
    readonly favResidencieID: FieldRef<"users", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users findRaw
   */
  export type usersFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * users aggregateRaw
   */
  export type usersAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * users.properties_owned
   */
  export type users$properties_ownedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    where?: PropertyWhereInput
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    cursor?: PropertyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * users.properties_sell
   */
  export type users$properties_sellArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    where?: PropertyWhereInput
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    cursor?: PropertyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * users.broker
   */
  export type users$brokerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    where?: BrokerWhereInput
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model Property
   */

  export type AggregateProperty = {
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  export type PropertyAvgAggregateOutputType = {
    price: number | null
  }

  export type PropertySumAggregateOutputType = {
    price: number | null
  }

  export type PropertyMinAggregateOutputType = {
    property_id: string | null
    title: string | null
    sellerID: string | null
    description: string | null
    propertyType: $Enums.PropertyType | null
    price: number | null
    brokerID: string | null
    buyerID: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PropertyMaxAggregateOutputType = {
    property_id: string | null
    title: string | null
    sellerID: string | null
    description: string | null
    propertyType: $Enums.PropertyType | null
    price: number | null
    brokerID: string | null
    buyerID: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PropertyCountAggregateOutputType = {
    property_id: number
    title: number
    sellerID: number
    description: number
    propertyType: number
    price: number
    brokerID: number
    buyerID: number
    createdAt: number
    updatedAt: number
    images: number
    file: number
    supportingDocuments: number
    _all: number
  }


  export type PropertyAvgAggregateInputType = {
    price?: true
  }

  export type PropertySumAggregateInputType = {
    price?: true
  }

  export type PropertyMinAggregateInputType = {
    property_id?: true
    title?: true
    sellerID?: true
    description?: true
    propertyType?: true
    price?: true
    brokerID?: true
    buyerID?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PropertyMaxAggregateInputType = {
    property_id?: true
    title?: true
    sellerID?: true
    description?: true
    propertyType?: true
    price?: true
    brokerID?: true
    buyerID?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PropertyCountAggregateInputType = {
    property_id?: true
    title?: true
    sellerID?: true
    description?: true
    propertyType?: true
    price?: true
    brokerID?: true
    buyerID?: true
    createdAt?: true
    updatedAt?: true
    images?: true
    file?: true
    supportingDocuments?: true
    _all?: true
  }

  export type PropertyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Property to aggregate.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Properties
    **/
    _count?: true | PropertyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropertyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropertySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyMaxAggregateInputType
  }

  export type GetPropertyAggregateType<T extends PropertyAggregateArgs> = {
        [P in keyof T & keyof AggregateProperty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProperty[P]>
      : GetScalarType<T[P], AggregateProperty[P]>
  }




  export type PropertyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyWhereInput
    orderBy?: PropertyOrderByWithAggregationInput | PropertyOrderByWithAggregationInput[]
    by: PropertyScalarFieldEnum[] | PropertyScalarFieldEnum
    having?: PropertyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyCountAggregateInputType | true
    _avg?: PropertyAvgAggregateInputType
    _sum?: PropertySumAggregateInputType
    _min?: PropertyMinAggregateInputType
    _max?: PropertyMaxAggregateInputType
  }

  export type PropertyGroupByOutputType = {
    property_id: string
    title: string
    sellerID: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    brokerID: string | null
    buyerID: string | null
    createdAt: Date
    updatedAt: Date
    images: string[]
    file: string[]
    supportingDocuments: JsonValue | null
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  type GetPropertyGroupByPayload<T extends PropertyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropertyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyGroupByOutputType[P]>
        }
      >
    >


  export type PropertySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    property_id?: boolean
    title?: boolean
    sellerID?: boolean
    description?: boolean
    propertyType?: boolean
    price?: boolean
    brokerID?: boolean
    buyerID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    images?: boolean
    file?: boolean
    supportingDocuments?: boolean
    seller?: boolean | usersDefaultArgs<ExtArgs>
    broker?: boolean | Property$brokerArgs<ExtArgs>
    buyer?: boolean | Property$buyerArgs<ExtArgs>
    vehicle?: boolean | Property$vehicleArgs<ExtArgs>
    land?: boolean | Property$landArgs<ExtArgs>
    house?: boolean | Property$houseArgs<ExtArgs>
  }, ExtArgs["result"]["property"]>

  export type PropertySelectScalar = {
    property_id?: boolean
    title?: boolean
    sellerID?: boolean
    description?: boolean
    propertyType?: boolean
    price?: boolean
    brokerID?: boolean
    buyerID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    images?: boolean
    file?: boolean
    supportingDocuments?: boolean
  }


  export type PropertyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seller?: boolean | usersDefaultArgs<ExtArgs>
    broker?: boolean | Property$brokerArgs<ExtArgs>
    buyer?: boolean | Property$buyerArgs<ExtArgs>
    vehicle?: boolean | Property$vehicleArgs<ExtArgs>
    land?: boolean | Property$landArgs<ExtArgs>
    house?: boolean | Property$houseArgs<ExtArgs>
  }


  export type $PropertyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Property"
    objects: {
      seller: Prisma.$usersPayload<ExtArgs>
      broker: Prisma.$BrokerPayload<ExtArgs> | null
      buyer: Prisma.$usersPayload<ExtArgs> | null
      vehicle: Prisma.$VehiclePayload<ExtArgs> | null
      land: Prisma.$LandPayload<ExtArgs> | null
      house: Prisma.$HousePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      property_id: string
      title: string
      sellerID: string
      description: string
      propertyType: $Enums.PropertyType
      price: number
      brokerID: string | null
      buyerID: string | null
      createdAt: Date
      updatedAt: Date
      images: string[]
      file: string[]
      supportingDocuments: Prisma.JsonValue | null
    }, ExtArgs["result"]["property"]>
    composites: {}
  }


  type PropertyGetPayload<S extends boolean | null | undefined | PropertyDefaultArgs> = $Result.GetResult<Prisma.$PropertyPayload, S>

  type PropertyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PropertyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PropertyCountAggregateInputType | true
    }

  export interface PropertyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Property'], meta: { name: 'Property' } }
    /**
     * Find zero or one Property that matches the filter.
     * @param {PropertyFindUniqueArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PropertyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyFindUniqueArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Property that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PropertyFindUniqueOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PropertyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Property that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PropertyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyFindFirstArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Property that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PropertyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Properties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Properties
     * const properties = await prisma.property.findMany()
     * 
     * // Get first 10 Properties
     * const properties = await prisma.property.findMany({ take: 10 })
     * 
     * // Only select the `property_id`
     * const propertyWithProperty_idOnly = await prisma.property.findMany({ select: { property_id: true } })
     * 
    **/
    findMany<T extends PropertyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Property.
     * @param {PropertyCreateArgs} args - Arguments to create a Property.
     * @example
     * // Create one Property
     * const Property = await prisma.property.create({
     *   data: {
     *     // ... data to create a Property
     *   }
     * })
     * 
    **/
    create<T extends PropertyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyCreateArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Properties.
     * @param {PropertyCreateManyArgs} args - Arguments to create many Properties.
     * @example
     * // Create many Properties
     * const property = await prisma.property.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PropertyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Property.
     * @param {PropertyDeleteArgs} args - Arguments to delete one Property.
     * @example
     * // Delete one Property
     * const Property = await prisma.property.delete({
     *   where: {
     *     // ... filter to delete one Property
     *   }
     * })
     * 
    **/
    delete<T extends PropertyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyDeleteArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Property.
     * @param {PropertyUpdateArgs} args - Arguments to update one Property.
     * @example
     * // Update one Property
     * const property = await prisma.property.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PropertyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyUpdateArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Properties.
     * @param {PropertyDeleteManyArgs} args - Arguments to filter Properties to delete.
     * @example
     * // Delete a few Properties
     * const { count } = await prisma.property.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PropertyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Properties
     * const property = await prisma.property.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PropertyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Property.
     * @param {PropertyUpsertArgs} args - Arguments to update or create a Property.
     * @example
     * // Update or create a Property
     * const property = await prisma.property.upsert({
     *   create: {
     *     // ... data to create a Property
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Property we want to update
     *   }
     * })
    **/
    upsert<T extends PropertyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyUpsertArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Properties that matches the filter.
     * @param {PropertyFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const property = await prisma.property.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: PropertyFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Property.
     * @param {PropertyAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const property = await prisma.property.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: PropertyAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyCountArgs} args - Arguments to filter Properties to count.
     * @example
     * // Count the number of Properties
     * const count = await prisma.property.count({
     *   where: {
     *     // ... the filter for the Properties we want to count
     *   }
     * })
    **/
    count<T extends PropertyCountArgs>(
      args?: Subset<T, PropertyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyAggregateArgs>(args: Subset<T, PropertyAggregateArgs>): Prisma.PrismaPromise<GetPropertyAggregateType<T>>

    /**
     * Group by Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyGroupByArgs['orderBy'] }
        : { orderBy?: PropertyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Property model
   */
  readonly fields: PropertyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Property.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PropertyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    seller<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    broker<T extends Property$brokerArgs<ExtArgs> = {}>(args?: Subset<T, Property$brokerArgs<ExtArgs>>): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    buyer<T extends Property$buyerArgs<ExtArgs> = {}>(args?: Subset<T, Property$buyerArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    vehicle<T extends Property$vehicleArgs<ExtArgs> = {}>(args?: Subset<T, Property$vehicleArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    land<T extends Property$landArgs<ExtArgs> = {}>(args?: Subset<T, Property$landArgs<ExtArgs>>): Prisma__LandClient<$Result.GetResult<Prisma.$LandPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    house<T extends Property$houseArgs<ExtArgs> = {}>(args?: Subset<T, Property$houseArgs<ExtArgs>>): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Property model
   */ 
  interface PropertyFieldRefs {
    readonly property_id: FieldRef<"Property", 'String'>
    readonly title: FieldRef<"Property", 'String'>
    readonly sellerID: FieldRef<"Property", 'String'>
    readonly description: FieldRef<"Property", 'String'>
    readonly propertyType: FieldRef<"Property", 'PropertyType'>
    readonly price: FieldRef<"Property", 'Float'>
    readonly brokerID: FieldRef<"Property", 'String'>
    readonly buyerID: FieldRef<"Property", 'String'>
    readonly createdAt: FieldRef<"Property", 'DateTime'>
    readonly updatedAt: FieldRef<"Property", 'DateTime'>
    readonly images: FieldRef<"Property", 'String[]'>
    readonly file: FieldRef<"Property", 'String[]'>
    readonly supportingDocuments: FieldRef<"Property", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Property findUnique
   */
  export type PropertyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property findUniqueOrThrow
   */
  export type PropertyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property findFirst
   */
  export type PropertyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     */
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property findFirstOrThrow
   */
  export type PropertyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     */
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property findMany
   */
  export type PropertyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Properties to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property create
   */
  export type PropertyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The data needed to create a Property.
     */
    data: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
  }

  /**
   * Property createMany
   */
  export type PropertyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Properties.
     */
    data: PropertyCreateManyInput | PropertyCreateManyInput[]
  }

  /**
   * Property update
   */
  export type PropertyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The data needed to update a Property.
     */
    data: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
    /**
     * Choose, which Property to update.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property updateMany
   */
  export type PropertyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Properties.
     */
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyInput>
    /**
     * Filter which Properties to update
     */
    where?: PropertyWhereInput
  }

  /**
   * Property upsert
   */
  export type PropertyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The filter to search for the Property to update in case it exists.
     */
    where: PropertyWhereUniqueInput
    /**
     * In case the Property found by the `where` argument doesn't exist, create a new Property with this data.
     */
    create: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
    /**
     * In case the Property was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
  }

  /**
   * Property delete
   */
  export type PropertyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter which Property to delete.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property deleteMany
   */
  export type PropertyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Properties to delete
     */
    where?: PropertyWhereInput
  }

  /**
   * Property findRaw
   */
  export type PropertyFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Property aggregateRaw
   */
  export type PropertyAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Property.broker
   */
  export type Property$brokerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    where?: BrokerWhereInput
  }

  /**
   * Property.buyer
   */
  export type Property$buyerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * Property.vehicle
   */
  export type Property$vehicleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    where?: VehicleWhereInput
  }

  /**
   * Property.land
   */
  export type Property$landArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Land
     */
    select?: LandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LandInclude<ExtArgs> | null
    where?: LandWhereInput
  }

  /**
   * Property.house
   */
  export type Property$houseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    where?: HouseWhereInput
  }

  /**
   * Property without action
   */
  export type PropertyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
  }


  /**
   * Model Vehicle
   */

  export type AggregateVehicle = {
    _count: VehicleCountAggregateOutputType | null
    _avg: VehicleAvgAggregateOutputType | null
    _sum: VehicleSumAggregateOutputType | null
    _min: VehicleMinAggregateOutputType | null
    _max: VehicleMaxAggregateOutputType | null
  }

  export type VehicleAvgAggregateOutputType = {
    seats: number | null
    mileage: number | null
    ManufacturedYear: number | null
    cc: number | null
  }

  export type VehicleSumAggregateOutputType = {
    seats: number | null
    mileage: number | null
    ManufacturedYear: number | null
    cc: number | null
  }

  export type VehicleMinAggregateOutputType = {
    vehicle_id: string | null
    propertyID: string | null
    vehicleType: string | null
    brand: string | null
    model: string | null
    seats: number | null
    mileage: number | null
    ManufacturedYear: number | null
    cc: number | null
    condition: $Enums.Condition | null
  }

  export type VehicleMaxAggregateOutputType = {
    vehicle_id: string | null
    propertyID: string | null
    vehicleType: string | null
    brand: string | null
    model: string | null
    seats: number | null
    mileage: number | null
    ManufacturedYear: number | null
    cc: number | null
    condition: $Enums.Condition | null
  }

  export type VehicleCountAggregateOutputType = {
    vehicle_id: number
    propertyID: number
    vehicleType: number
    brand: number
    model: number
    seats: number
    mileage: number
    ManufacturedYear: number
    cc: number
    condition: number
    _all: number
  }


  export type VehicleAvgAggregateInputType = {
    seats?: true
    mileage?: true
    ManufacturedYear?: true
    cc?: true
  }

  export type VehicleSumAggregateInputType = {
    seats?: true
    mileage?: true
    ManufacturedYear?: true
    cc?: true
  }

  export type VehicleMinAggregateInputType = {
    vehicle_id?: true
    propertyID?: true
    vehicleType?: true
    brand?: true
    model?: true
    seats?: true
    mileage?: true
    ManufacturedYear?: true
    cc?: true
    condition?: true
  }

  export type VehicleMaxAggregateInputType = {
    vehicle_id?: true
    propertyID?: true
    vehicleType?: true
    brand?: true
    model?: true
    seats?: true
    mileage?: true
    ManufacturedYear?: true
    cc?: true
    condition?: true
  }

  export type VehicleCountAggregateInputType = {
    vehicle_id?: true
    propertyID?: true
    vehicleType?: true
    brand?: true
    model?: true
    seats?: true
    mileage?: true
    ManufacturedYear?: true
    cc?: true
    condition?: true
    _all?: true
  }

  export type VehicleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vehicle to aggregate.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vehicles
    **/
    _count?: true | VehicleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VehicleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VehicleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VehicleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VehicleMaxAggregateInputType
  }

  export type GetVehicleAggregateType<T extends VehicleAggregateArgs> = {
        [P in keyof T & keyof AggregateVehicle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVehicle[P]>
      : GetScalarType<T[P], AggregateVehicle[P]>
  }




  export type VehicleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleWhereInput
    orderBy?: VehicleOrderByWithAggregationInput | VehicleOrderByWithAggregationInput[]
    by: VehicleScalarFieldEnum[] | VehicleScalarFieldEnum
    having?: VehicleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VehicleCountAggregateInputType | true
    _avg?: VehicleAvgAggregateInputType
    _sum?: VehicleSumAggregateInputType
    _min?: VehicleMinAggregateInputType
    _max?: VehicleMaxAggregateInputType
  }

  export type VehicleGroupByOutputType = {
    vehicle_id: string
    propertyID: string
    vehicleType: string
    brand: string
    model: string
    seats: number
    mileage: number
    ManufacturedYear: number
    cc: number
    condition: $Enums.Condition
    _count: VehicleCountAggregateOutputType | null
    _avg: VehicleAvgAggregateOutputType | null
    _sum: VehicleSumAggregateOutputType | null
    _min: VehicleMinAggregateOutputType | null
    _max: VehicleMaxAggregateOutputType | null
  }

  type GetVehicleGroupByPayload<T extends VehicleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VehicleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VehicleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VehicleGroupByOutputType[P]>
            : GetScalarType<T[P], VehicleGroupByOutputType[P]>
        }
      >
    >


  export type VehicleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    vehicle_id?: boolean
    propertyID?: boolean
    vehicleType?: boolean
    brand?: boolean
    model?: boolean
    seats?: boolean
    mileage?: boolean
    ManufacturedYear?: boolean
    cc?: boolean
    condition?: boolean
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicle"]>

  export type VehicleSelectScalar = {
    vehicle_id?: boolean
    propertyID?: boolean
    vehicleType?: boolean
    brand?: boolean
    model?: boolean
    seats?: boolean
    mileage?: boolean
    ManufacturedYear?: boolean
    cc?: boolean
    condition?: boolean
  }


  export type VehicleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }


  export type $VehiclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vehicle"
    objects: {
      property: Prisma.$PropertyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      vehicle_id: string
      propertyID: string
      vehicleType: string
      brand: string
      model: string
      seats: number
      mileage: number
      ManufacturedYear: number
      cc: number
      condition: $Enums.Condition
    }, ExtArgs["result"]["vehicle"]>
    composites: {}
  }


  type VehicleGetPayload<S extends boolean | null | undefined | VehicleDefaultArgs> = $Result.GetResult<Prisma.$VehiclePayload, S>

  type VehicleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VehicleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VehicleCountAggregateInputType | true
    }

  export interface VehicleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vehicle'], meta: { name: 'Vehicle' } }
    /**
     * Find zero or one Vehicle that matches the filter.
     * @param {VehicleFindUniqueArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VehicleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VehicleFindUniqueArgs<ExtArgs>>
    ): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Vehicle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VehicleFindUniqueOrThrowArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VehicleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VehicleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Vehicle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindFirstArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VehicleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VehicleFindFirstArgs<ExtArgs>>
    ): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Vehicle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindFirstOrThrowArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VehicleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VehicleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Vehicles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vehicles
     * const vehicles = await prisma.vehicle.findMany()
     * 
     * // Get first 10 Vehicles
     * const vehicles = await prisma.vehicle.findMany({ take: 10 })
     * 
     * // Only select the `vehicle_id`
     * const vehicleWithVehicle_idOnly = await prisma.vehicle.findMany({ select: { vehicle_id: true } })
     * 
    **/
    findMany<T extends VehicleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VehicleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Vehicle.
     * @param {VehicleCreateArgs} args - Arguments to create a Vehicle.
     * @example
     * // Create one Vehicle
     * const Vehicle = await prisma.vehicle.create({
     *   data: {
     *     // ... data to create a Vehicle
     *   }
     * })
     * 
    **/
    create<T extends VehicleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VehicleCreateArgs<ExtArgs>>
    ): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Vehicles.
     * @param {VehicleCreateManyArgs} args - Arguments to create many Vehicles.
     * @example
     * // Create many Vehicles
     * const vehicle = await prisma.vehicle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends VehicleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VehicleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vehicle.
     * @param {VehicleDeleteArgs} args - Arguments to delete one Vehicle.
     * @example
     * // Delete one Vehicle
     * const Vehicle = await prisma.vehicle.delete({
     *   where: {
     *     // ... filter to delete one Vehicle
     *   }
     * })
     * 
    **/
    delete<T extends VehicleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VehicleDeleteArgs<ExtArgs>>
    ): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Vehicle.
     * @param {VehicleUpdateArgs} args - Arguments to update one Vehicle.
     * @example
     * // Update one Vehicle
     * const vehicle = await prisma.vehicle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VehicleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VehicleUpdateArgs<ExtArgs>>
    ): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Vehicles.
     * @param {VehicleDeleteManyArgs} args - Arguments to filter Vehicles to delete.
     * @example
     * // Delete a few Vehicles
     * const { count } = await prisma.vehicle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VehicleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VehicleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vehicles
     * const vehicle = await prisma.vehicle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VehicleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VehicleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vehicle.
     * @param {VehicleUpsertArgs} args - Arguments to update or create a Vehicle.
     * @example
     * // Update or create a Vehicle
     * const vehicle = await prisma.vehicle.upsert({
     *   create: {
     *     // ... data to create a Vehicle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vehicle we want to update
     *   }
     * })
    **/
    upsert<T extends VehicleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VehicleUpsertArgs<ExtArgs>>
    ): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Vehicles that matches the filter.
     * @param {VehicleFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const vehicle = await prisma.vehicle.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: VehicleFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Vehicle.
     * @param {VehicleAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const vehicle = await prisma.vehicle.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: VehicleAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleCountArgs} args - Arguments to filter Vehicles to count.
     * @example
     * // Count the number of Vehicles
     * const count = await prisma.vehicle.count({
     *   where: {
     *     // ... the filter for the Vehicles we want to count
     *   }
     * })
    **/
    count<T extends VehicleCountArgs>(
      args?: Subset<T, VehicleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VehicleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VehicleAggregateArgs>(args: Subset<T, VehicleAggregateArgs>): Prisma.PrismaPromise<GetVehicleAggregateType<T>>

    /**
     * Group by Vehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VehicleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VehicleGroupByArgs['orderBy'] }
        : { orderBy?: VehicleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VehicleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVehicleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vehicle model
   */
  readonly fields: VehicleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vehicle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VehicleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    property<T extends PropertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PropertyDefaultArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Vehicle model
   */ 
  interface VehicleFieldRefs {
    readonly vehicle_id: FieldRef<"Vehicle", 'String'>
    readonly propertyID: FieldRef<"Vehicle", 'String'>
    readonly vehicleType: FieldRef<"Vehicle", 'String'>
    readonly brand: FieldRef<"Vehicle", 'String'>
    readonly model: FieldRef<"Vehicle", 'String'>
    readonly seats: FieldRef<"Vehicle", 'Int'>
    readonly mileage: FieldRef<"Vehicle", 'Int'>
    readonly ManufacturedYear: FieldRef<"Vehicle", 'Int'>
    readonly cc: FieldRef<"Vehicle", 'Int'>
    readonly condition: FieldRef<"Vehicle", 'Condition'>
  }
    

  // Custom InputTypes
  /**
   * Vehicle findUnique
   */
  export type VehicleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle findUniqueOrThrow
   */
  export type VehicleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle findFirst
   */
  export type VehicleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vehicles.
     */
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle findFirstOrThrow
   */
  export type VehicleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vehicles.
     */
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle findMany
   */
  export type VehicleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicles to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle create
   */
  export type VehicleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The data needed to create a Vehicle.
     */
    data: XOR<VehicleCreateInput, VehicleUncheckedCreateInput>
  }

  /**
   * Vehicle createMany
   */
  export type VehicleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vehicles.
     */
    data: VehicleCreateManyInput | VehicleCreateManyInput[]
  }

  /**
   * Vehicle update
   */
  export type VehicleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The data needed to update a Vehicle.
     */
    data: XOR<VehicleUpdateInput, VehicleUncheckedUpdateInput>
    /**
     * Choose, which Vehicle to update.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle updateMany
   */
  export type VehicleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vehicles.
     */
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyInput>
    /**
     * Filter which Vehicles to update
     */
    where?: VehicleWhereInput
  }

  /**
   * Vehicle upsert
   */
  export type VehicleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The filter to search for the Vehicle to update in case it exists.
     */
    where: VehicleWhereUniqueInput
    /**
     * In case the Vehicle found by the `where` argument doesn't exist, create a new Vehicle with this data.
     */
    create: XOR<VehicleCreateInput, VehicleUncheckedCreateInput>
    /**
     * In case the Vehicle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VehicleUpdateInput, VehicleUncheckedUpdateInput>
  }

  /**
   * Vehicle delete
   */
  export type VehicleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter which Vehicle to delete.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle deleteMany
   */
  export type VehicleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vehicles to delete
     */
    where?: VehicleWhereInput
  }

  /**
   * Vehicle findRaw
   */
  export type VehicleFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Vehicle aggregateRaw
   */
  export type VehicleAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Vehicle without action
   */
  export type VehicleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
  }


  /**
   * Model Land
   */

  export type AggregateLand = {
    _count: LandCountAggregateOutputType | null
    _min: LandMinAggregateOutputType | null
    _max: LandMaxAggregateOutputType | null
  }

  export type LandMinAggregateOutputType = {
    land_id: string | null
    propertyID: string | null
    area: string | null
    location: string | null
    land_type: string | null
    ownership_type: string | null
  }

  export type LandMaxAggregateOutputType = {
    land_id: string | null
    propertyID: string | null
    area: string | null
    location: string | null
    land_type: string | null
    ownership_type: string | null
  }

  export type LandCountAggregateOutputType = {
    land_id: number
    propertyID: number
    area: number
    location: number
    land_type: number
    ownership_type: number
    _all: number
  }


  export type LandMinAggregateInputType = {
    land_id?: true
    propertyID?: true
    area?: true
    location?: true
    land_type?: true
    ownership_type?: true
  }

  export type LandMaxAggregateInputType = {
    land_id?: true
    propertyID?: true
    area?: true
    location?: true
    land_type?: true
    ownership_type?: true
  }

  export type LandCountAggregateInputType = {
    land_id?: true
    propertyID?: true
    area?: true
    location?: true
    land_type?: true
    ownership_type?: true
    _all?: true
  }

  export type LandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Land to aggregate.
     */
    where?: LandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lands to fetch.
     */
    orderBy?: LandOrderByWithRelationInput | LandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lands
    **/
    _count?: true | LandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LandMaxAggregateInputType
  }

  export type GetLandAggregateType<T extends LandAggregateArgs> = {
        [P in keyof T & keyof AggregateLand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLand[P]>
      : GetScalarType<T[P], AggregateLand[P]>
  }




  export type LandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LandWhereInput
    orderBy?: LandOrderByWithAggregationInput | LandOrderByWithAggregationInput[]
    by: LandScalarFieldEnum[] | LandScalarFieldEnum
    having?: LandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LandCountAggregateInputType | true
    _min?: LandMinAggregateInputType
    _max?: LandMaxAggregateInputType
  }

  export type LandGroupByOutputType = {
    land_id: string
    propertyID: string
    area: string
    location: string
    land_type: string
    ownership_type: string
    _count: LandCountAggregateOutputType | null
    _min: LandMinAggregateOutputType | null
    _max: LandMaxAggregateOutputType | null
  }

  type GetLandGroupByPayload<T extends LandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LandGroupByOutputType[P]>
            : GetScalarType<T[P], LandGroupByOutputType[P]>
        }
      >
    >


  export type LandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    land_id?: boolean
    propertyID?: boolean
    area?: boolean
    location?: boolean
    land_type?: boolean
    ownership_type?: boolean
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["land"]>

  export type LandSelectScalar = {
    land_id?: boolean
    propertyID?: boolean
    area?: boolean
    location?: boolean
    land_type?: boolean
    ownership_type?: boolean
  }


  export type LandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }


  export type $LandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Land"
    objects: {
      property: Prisma.$PropertyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      land_id: string
      propertyID: string
      area: string
      location: string
      land_type: string
      ownership_type: string
    }, ExtArgs["result"]["land"]>
    composites: {}
  }


  type LandGetPayload<S extends boolean | null | undefined | LandDefaultArgs> = $Result.GetResult<Prisma.$LandPayload, S>

  type LandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LandFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LandCountAggregateInputType | true
    }

  export interface LandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Land'], meta: { name: 'Land' } }
    /**
     * Find zero or one Land that matches the filter.
     * @param {LandFindUniqueArgs} args - Arguments to find a Land
     * @example
     * // Get one Land
     * const land = await prisma.land.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LandFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LandFindUniqueArgs<ExtArgs>>
    ): Prisma__LandClient<$Result.GetResult<Prisma.$LandPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Land that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LandFindUniqueOrThrowArgs} args - Arguments to find a Land
     * @example
     * // Get one Land
     * const land = await prisma.land.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LandFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LandFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LandClient<$Result.GetResult<Prisma.$LandPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Land that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LandFindFirstArgs} args - Arguments to find a Land
     * @example
     * // Get one Land
     * const land = await prisma.land.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LandFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LandFindFirstArgs<ExtArgs>>
    ): Prisma__LandClient<$Result.GetResult<Prisma.$LandPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Land that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LandFindFirstOrThrowArgs} args - Arguments to find a Land
     * @example
     * // Get one Land
     * const land = await prisma.land.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LandFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LandFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LandClient<$Result.GetResult<Prisma.$LandPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Lands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lands
     * const lands = await prisma.land.findMany()
     * 
     * // Get first 10 Lands
     * const lands = await prisma.land.findMany({ take: 10 })
     * 
     * // Only select the `land_id`
     * const landWithLand_idOnly = await prisma.land.findMany({ select: { land_id: true } })
     * 
    **/
    findMany<T extends LandFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LandFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LandPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Land.
     * @param {LandCreateArgs} args - Arguments to create a Land.
     * @example
     * // Create one Land
     * const Land = await prisma.land.create({
     *   data: {
     *     // ... data to create a Land
     *   }
     * })
     * 
    **/
    create<T extends LandCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LandCreateArgs<ExtArgs>>
    ): Prisma__LandClient<$Result.GetResult<Prisma.$LandPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Lands.
     * @param {LandCreateManyArgs} args - Arguments to create many Lands.
     * @example
     * // Create many Lands
     * const land = await prisma.land.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends LandCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LandCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Land.
     * @param {LandDeleteArgs} args - Arguments to delete one Land.
     * @example
     * // Delete one Land
     * const Land = await prisma.land.delete({
     *   where: {
     *     // ... filter to delete one Land
     *   }
     * })
     * 
    **/
    delete<T extends LandDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LandDeleteArgs<ExtArgs>>
    ): Prisma__LandClient<$Result.GetResult<Prisma.$LandPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Land.
     * @param {LandUpdateArgs} args - Arguments to update one Land.
     * @example
     * // Update one Land
     * const land = await prisma.land.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LandUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LandUpdateArgs<ExtArgs>>
    ): Prisma__LandClient<$Result.GetResult<Prisma.$LandPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Lands.
     * @param {LandDeleteManyArgs} args - Arguments to filter Lands to delete.
     * @example
     * // Delete a few Lands
     * const { count } = await prisma.land.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LandDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LandDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lands
     * const land = await prisma.land.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LandUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LandUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Land.
     * @param {LandUpsertArgs} args - Arguments to update or create a Land.
     * @example
     * // Update or create a Land
     * const land = await prisma.land.upsert({
     *   create: {
     *     // ... data to create a Land
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Land we want to update
     *   }
     * })
    **/
    upsert<T extends LandUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LandUpsertArgs<ExtArgs>>
    ): Prisma__LandClient<$Result.GetResult<Prisma.$LandPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Lands that matches the filter.
     * @param {LandFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const land = await prisma.land.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: LandFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Land.
     * @param {LandAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const land = await prisma.land.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: LandAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Lands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LandCountArgs} args - Arguments to filter Lands to count.
     * @example
     * // Count the number of Lands
     * const count = await prisma.land.count({
     *   where: {
     *     // ... the filter for the Lands we want to count
     *   }
     * })
    **/
    count<T extends LandCountArgs>(
      args?: Subset<T, LandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Land.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LandAggregateArgs>(args: Subset<T, LandAggregateArgs>): Prisma.PrismaPromise<GetLandAggregateType<T>>

    /**
     * Group by Land.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LandGroupByArgs['orderBy'] }
        : { orderBy?: LandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Land model
   */
  readonly fields: LandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Land.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    property<T extends PropertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PropertyDefaultArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Land model
   */ 
  interface LandFieldRefs {
    readonly land_id: FieldRef<"Land", 'String'>
    readonly propertyID: FieldRef<"Land", 'String'>
    readonly area: FieldRef<"Land", 'String'>
    readonly location: FieldRef<"Land", 'String'>
    readonly land_type: FieldRef<"Land", 'String'>
    readonly ownership_type: FieldRef<"Land", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Land findUnique
   */
  export type LandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Land
     */
    select?: LandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LandInclude<ExtArgs> | null
    /**
     * Filter, which Land to fetch.
     */
    where: LandWhereUniqueInput
  }

  /**
   * Land findUniqueOrThrow
   */
  export type LandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Land
     */
    select?: LandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LandInclude<ExtArgs> | null
    /**
     * Filter, which Land to fetch.
     */
    where: LandWhereUniqueInput
  }

  /**
   * Land findFirst
   */
  export type LandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Land
     */
    select?: LandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LandInclude<ExtArgs> | null
    /**
     * Filter, which Land to fetch.
     */
    where?: LandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lands to fetch.
     */
    orderBy?: LandOrderByWithRelationInput | LandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lands.
     */
    cursor?: LandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lands.
     */
    distinct?: LandScalarFieldEnum | LandScalarFieldEnum[]
  }

  /**
   * Land findFirstOrThrow
   */
  export type LandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Land
     */
    select?: LandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LandInclude<ExtArgs> | null
    /**
     * Filter, which Land to fetch.
     */
    where?: LandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lands to fetch.
     */
    orderBy?: LandOrderByWithRelationInput | LandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lands.
     */
    cursor?: LandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lands.
     */
    distinct?: LandScalarFieldEnum | LandScalarFieldEnum[]
  }

  /**
   * Land findMany
   */
  export type LandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Land
     */
    select?: LandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LandInclude<ExtArgs> | null
    /**
     * Filter, which Lands to fetch.
     */
    where?: LandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lands to fetch.
     */
    orderBy?: LandOrderByWithRelationInput | LandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lands.
     */
    cursor?: LandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lands.
     */
    skip?: number
    distinct?: LandScalarFieldEnum | LandScalarFieldEnum[]
  }

  /**
   * Land create
   */
  export type LandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Land
     */
    select?: LandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LandInclude<ExtArgs> | null
    /**
     * The data needed to create a Land.
     */
    data: XOR<LandCreateInput, LandUncheckedCreateInput>
  }

  /**
   * Land createMany
   */
  export type LandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lands.
     */
    data: LandCreateManyInput | LandCreateManyInput[]
  }

  /**
   * Land update
   */
  export type LandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Land
     */
    select?: LandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LandInclude<ExtArgs> | null
    /**
     * The data needed to update a Land.
     */
    data: XOR<LandUpdateInput, LandUncheckedUpdateInput>
    /**
     * Choose, which Land to update.
     */
    where: LandWhereUniqueInput
  }

  /**
   * Land updateMany
   */
  export type LandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lands.
     */
    data: XOR<LandUpdateManyMutationInput, LandUncheckedUpdateManyInput>
    /**
     * Filter which Lands to update
     */
    where?: LandWhereInput
  }

  /**
   * Land upsert
   */
  export type LandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Land
     */
    select?: LandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LandInclude<ExtArgs> | null
    /**
     * The filter to search for the Land to update in case it exists.
     */
    where: LandWhereUniqueInput
    /**
     * In case the Land found by the `where` argument doesn't exist, create a new Land with this data.
     */
    create: XOR<LandCreateInput, LandUncheckedCreateInput>
    /**
     * In case the Land was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LandUpdateInput, LandUncheckedUpdateInput>
  }

  /**
   * Land delete
   */
  export type LandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Land
     */
    select?: LandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LandInclude<ExtArgs> | null
    /**
     * Filter which Land to delete.
     */
    where: LandWhereUniqueInput
  }

  /**
   * Land deleteMany
   */
  export type LandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lands to delete
     */
    where?: LandWhereInput
  }

  /**
   * Land findRaw
   */
  export type LandFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Land aggregateRaw
   */
  export type LandAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Land without action
   */
  export type LandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Land
     */
    select?: LandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LandInclude<ExtArgs> | null
  }


  /**
   * Model House
   */

  export type AggregateHouse = {
    _count: HouseCountAggregateOutputType | null
    _avg: HouseAvgAggregateOutputType | null
    _sum: HouseSumAggregateOutputType | null
    _min: HouseMinAggregateOutputType | null
    _max: HouseMaxAggregateOutputType | null
  }

  export type HouseAvgAggregateOutputType = {
    size: number | null
    rooms: number | null
    bathrooms: number | null
  }

  export type HouseSumAggregateOutputType = {
    size: number | null
    rooms: number | null
    bathrooms: number | null
  }

  export type HouseMinAggregateOutputType = {
    house_id: string | null
    propertyID: string | null
    size: number | null
    location: string | null
    rooms: number | null
    bathrooms: number | null
  }

  export type HouseMaxAggregateOutputType = {
    house_id: string | null
    propertyID: string | null
    size: number | null
    location: string | null
    rooms: number | null
    bathrooms: number | null
  }

  export type HouseCountAggregateOutputType = {
    house_id: number
    propertyID: number
    size: number
    location: number
    rooms: number
    bathrooms: number
    _all: number
  }


  export type HouseAvgAggregateInputType = {
    size?: true
    rooms?: true
    bathrooms?: true
  }

  export type HouseSumAggregateInputType = {
    size?: true
    rooms?: true
    bathrooms?: true
  }

  export type HouseMinAggregateInputType = {
    house_id?: true
    propertyID?: true
    size?: true
    location?: true
    rooms?: true
    bathrooms?: true
  }

  export type HouseMaxAggregateInputType = {
    house_id?: true
    propertyID?: true
    size?: true
    location?: true
    rooms?: true
    bathrooms?: true
  }

  export type HouseCountAggregateInputType = {
    house_id?: true
    propertyID?: true
    size?: true
    location?: true
    rooms?: true
    bathrooms?: true
    _all?: true
  }

  export type HouseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which House to aggregate.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: HouseOrderByWithRelationInput | HouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Houses
    **/
    _count?: true | HouseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HouseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HouseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HouseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HouseMaxAggregateInputType
  }

  export type GetHouseAggregateType<T extends HouseAggregateArgs> = {
        [P in keyof T & keyof AggregateHouse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHouse[P]>
      : GetScalarType<T[P], AggregateHouse[P]>
  }




  export type HouseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HouseWhereInput
    orderBy?: HouseOrderByWithAggregationInput | HouseOrderByWithAggregationInput[]
    by: HouseScalarFieldEnum[] | HouseScalarFieldEnum
    having?: HouseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HouseCountAggregateInputType | true
    _avg?: HouseAvgAggregateInputType
    _sum?: HouseSumAggregateInputType
    _min?: HouseMinAggregateInputType
    _max?: HouseMaxAggregateInputType
  }

  export type HouseGroupByOutputType = {
    house_id: string
    propertyID: string
    size: number
    location: string
    rooms: number
    bathrooms: number
    _count: HouseCountAggregateOutputType | null
    _avg: HouseAvgAggregateOutputType | null
    _sum: HouseSumAggregateOutputType | null
    _min: HouseMinAggregateOutputType | null
    _max: HouseMaxAggregateOutputType | null
  }

  type GetHouseGroupByPayload<T extends HouseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HouseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HouseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HouseGroupByOutputType[P]>
            : GetScalarType<T[P], HouseGroupByOutputType[P]>
        }
      >
    >


  export type HouseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    house_id?: boolean
    propertyID?: boolean
    size?: boolean
    location?: boolean
    rooms?: boolean
    bathrooms?: boolean
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["house"]>

  export type HouseSelectScalar = {
    house_id?: boolean
    propertyID?: boolean
    size?: boolean
    location?: boolean
    rooms?: boolean
    bathrooms?: boolean
  }


  export type HouseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }


  export type $HousePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "House"
    objects: {
      property: Prisma.$PropertyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      house_id: string
      propertyID: string
      size: number
      location: string
      rooms: number
      bathrooms: number
    }, ExtArgs["result"]["house"]>
    composites: {}
  }


  type HouseGetPayload<S extends boolean | null | undefined | HouseDefaultArgs> = $Result.GetResult<Prisma.$HousePayload, S>

  type HouseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HouseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HouseCountAggregateInputType | true
    }

  export interface HouseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['House'], meta: { name: 'House' } }
    /**
     * Find zero or one House that matches the filter.
     * @param {HouseFindUniqueArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HouseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HouseFindUniqueArgs<ExtArgs>>
    ): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one House that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HouseFindUniqueOrThrowArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HouseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first House that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseFindFirstArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HouseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseFindFirstArgs<ExtArgs>>
    ): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first House that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseFindFirstOrThrowArgs} args - Arguments to find a House
     * @example
     * // Get one House
     * const house = await prisma.house.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HouseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Houses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Houses
     * const houses = await prisma.house.findMany()
     * 
     * // Get first 10 Houses
     * const houses = await prisma.house.findMany({ take: 10 })
     * 
     * // Only select the `house_id`
     * const houseWithHouse_idOnly = await prisma.house.findMany({ select: { house_id: true } })
     * 
    **/
    findMany<T extends HouseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a House.
     * @param {HouseCreateArgs} args - Arguments to create a House.
     * @example
     * // Create one House
     * const House = await prisma.house.create({
     *   data: {
     *     // ... data to create a House
     *   }
     * })
     * 
    **/
    create<T extends HouseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HouseCreateArgs<ExtArgs>>
    ): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Houses.
     * @param {HouseCreateManyArgs} args - Arguments to create many Houses.
     * @example
     * // Create many Houses
     * const house = await prisma.house.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends HouseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a House.
     * @param {HouseDeleteArgs} args - Arguments to delete one House.
     * @example
     * // Delete one House
     * const House = await prisma.house.delete({
     *   where: {
     *     // ... filter to delete one House
     *   }
     * })
     * 
    **/
    delete<T extends HouseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HouseDeleteArgs<ExtArgs>>
    ): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one House.
     * @param {HouseUpdateArgs} args - Arguments to update one House.
     * @example
     * // Update one House
     * const house = await prisma.house.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HouseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HouseUpdateArgs<ExtArgs>>
    ): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Houses.
     * @param {HouseDeleteManyArgs} args - Arguments to filter Houses to delete.
     * @example
     * // Delete a few Houses
     * const { count } = await prisma.house.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HouseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HouseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Houses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Houses
     * const house = await prisma.house.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HouseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HouseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one House.
     * @param {HouseUpsertArgs} args - Arguments to update or create a House.
     * @example
     * // Update or create a House
     * const house = await prisma.house.upsert({
     *   create: {
     *     // ... data to create a House
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the House we want to update
     *   }
     * })
    **/
    upsert<T extends HouseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HouseUpsertArgs<ExtArgs>>
    ): Prisma__HouseClient<$Result.GetResult<Prisma.$HousePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Houses that matches the filter.
     * @param {HouseFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const house = await prisma.house.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: HouseFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a House.
     * @param {HouseAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const house = await prisma.house.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: HouseAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Houses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseCountArgs} args - Arguments to filter Houses to count.
     * @example
     * // Count the number of Houses
     * const count = await prisma.house.count({
     *   where: {
     *     // ... the filter for the Houses we want to count
     *   }
     * })
    **/
    count<T extends HouseCountArgs>(
      args?: Subset<T, HouseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HouseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a House.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HouseAggregateArgs>(args: Subset<T, HouseAggregateArgs>): Prisma.PrismaPromise<GetHouseAggregateType<T>>

    /**
     * Group by House.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HouseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HouseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HouseGroupByArgs['orderBy'] }
        : { orderBy?: HouseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HouseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHouseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the House model
   */
  readonly fields: HouseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for House.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HouseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    property<T extends PropertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PropertyDefaultArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the House model
   */ 
  interface HouseFieldRefs {
    readonly house_id: FieldRef<"House", 'String'>
    readonly propertyID: FieldRef<"House", 'String'>
    readonly size: FieldRef<"House", 'Float'>
    readonly location: FieldRef<"House", 'String'>
    readonly rooms: FieldRef<"House", 'Int'>
    readonly bathrooms: FieldRef<"House", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * House findUnique
   */
  export type HouseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * Filter, which House to fetch.
     */
    where: HouseWhereUniqueInput
  }

  /**
   * House findUniqueOrThrow
   */
  export type HouseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * Filter, which House to fetch.
     */
    where: HouseWhereUniqueInput
  }

  /**
   * House findFirst
   */
  export type HouseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * Filter, which House to fetch.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: HouseOrderByWithRelationInput | HouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Houses.
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Houses.
     */
    distinct?: HouseScalarFieldEnum | HouseScalarFieldEnum[]
  }

  /**
   * House findFirstOrThrow
   */
  export type HouseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * Filter, which House to fetch.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: HouseOrderByWithRelationInput | HouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Houses.
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Houses.
     */
    distinct?: HouseScalarFieldEnum | HouseScalarFieldEnum[]
  }

  /**
   * House findMany
   */
  export type HouseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * Filter, which Houses to fetch.
     */
    where?: HouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Houses to fetch.
     */
    orderBy?: HouseOrderByWithRelationInput | HouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Houses.
     */
    cursor?: HouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Houses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Houses.
     */
    skip?: number
    distinct?: HouseScalarFieldEnum | HouseScalarFieldEnum[]
  }

  /**
   * House create
   */
  export type HouseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * The data needed to create a House.
     */
    data: XOR<HouseCreateInput, HouseUncheckedCreateInput>
  }

  /**
   * House createMany
   */
  export type HouseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Houses.
     */
    data: HouseCreateManyInput | HouseCreateManyInput[]
  }

  /**
   * House update
   */
  export type HouseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * The data needed to update a House.
     */
    data: XOR<HouseUpdateInput, HouseUncheckedUpdateInput>
    /**
     * Choose, which House to update.
     */
    where: HouseWhereUniqueInput
  }

  /**
   * House updateMany
   */
  export type HouseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Houses.
     */
    data: XOR<HouseUpdateManyMutationInput, HouseUncheckedUpdateManyInput>
    /**
     * Filter which Houses to update
     */
    where?: HouseWhereInput
  }

  /**
   * House upsert
   */
  export type HouseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * The filter to search for the House to update in case it exists.
     */
    where: HouseWhereUniqueInput
    /**
     * In case the House found by the `where` argument doesn't exist, create a new House with this data.
     */
    create: XOR<HouseCreateInput, HouseUncheckedCreateInput>
    /**
     * In case the House was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HouseUpdateInput, HouseUncheckedUpdateInput>
  }

  /**
   * House delete
   */
  export type HouseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
    /**
     * Filter which House to delete.
     */
    where: HouseWhereUniqueInput
  }

  /**
   * House deleteMany
   */
  export type HouseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Houses to delete
     */
    where?: HouseWhereInput
  }

  /**
   * House findRaw
   */
  export type HouseFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * House aggregateRaw
   */
  export type HouseAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * House without action
   */
  export type HouseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the House
     */
    select?: HouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HouseInclude<ExtArgs> | null
  }


  /**
   * Model Broker
   */

  export type AggregateBroker = {
    _count: BrokerCountAggregateOutputType | null
    _min: BrokerMinAggregateOutputType | null
    _max: BrokerMaxAggregateOutputType | null
  }

  export type BrokerMinAggregateOutputType = {
    broker_id: string | null
    userID: string | null
    fullName: string | null
    brokerLicense: string | null
    password: string | null
    brokerIC: string | null
    fileIC: string | null
    fileBrokerLicense: string | null
  }

  export type BrokerMaxAggregateOutputType = {
    broker_id: string | null
    userID: string | null
    fullName: string | null
    brokerLicense: string | null
    password: string | null
    brokerIC: string | null
    fileIC: string | null
    fileBrokerLicense: string | null
  }

  export type BrokerCountAggregateOutputType = {
    broker_id: number
    userID: number
    fullName: number
    brokerLicense: number
    password: number
    brokerIC: number
    fileIC: number
    fileBrokerLicense: number
    _all: number
  }


  export type BrokerMinAggregateInputType = {
    broker_id?: true
    userID?: true
    fullName?: true
    brokerLicense?: true
    password?: true
    brokerIC?: true
    fileIC?: true
    fileBrokerLicense?: true
  }

  export type BrokerMaxAggregateInputType = {
    broker_id?: true
    userID?: true
    fullName?: true
    brokerLicense?: true
    password?: true
    brokerIC?: true
    fileIC?: true
    fileBrokerLicense?: true
  }

  export type BrokerCountAggregateInputType = {
    broker_id?: true
    userID?: true
    fullName?: true
    brokerLicense?: true
    password?: true
    brokerIC?: true
    fileIC?: true
    fileBrokerLicense?: true
    _all?: true
  }

  export type BrokerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Broker to aggregate.
     */
    where?: BrokerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brokers to fetch.
     */
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrokerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brokers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brokers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brokers
    **/
    _count?: true | BrokerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrokerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrokerMaxAggregateInputType
  }

  export type GetBrokerAggregateType<T extends BrokerAggregateArgs> = {
        [P in keyof T & keyof AggregateBroker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBroker[P]>
      : GetScalarType<T[P], AggregateBroker[P]>
  }




  export type BrokerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrokerWhereInput
    orderBy?: BrokerOrderByWithAggregationInput | BrokerOrderByWithAggregationInput[]
    by: BrokerScalarFieldEnum[] | BrokerScalarFieldEnum
    having?: BrokerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrokerCountAggregateInputType | true
    _min?: BrokerMinAggregateInputType
    _max?: BrokerMaxAggregateInputType
  }

  export type BrokerGroupByOutputType = {
    broker_id: string
    userID: string
    fullName: string
    brokerLicense: string
    password: string
    brokerIC: string
    fileIC: string
    fileBrokerLicense: string
    _count: BrokerCountAggregateOutputType | null
    _min: BrokerMinAggregateOutputType | null
    _max: BrokerMaxAggregateOutputType | null
  }

  type GetBrokerGroupByPayload<T extends BrokerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrokerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrokerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrokerGroupByOutputType[P]>
            : GetScalarType<T[P], BrokerGroupByOutputType[P]>
        }
      >
    >


  export type BrokerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    broker_id?: boolean
    userID?: boolean
    fullName?: boolean
    brokerLicense?: boolean
    password?: boolean
    brokerIC?: boolean
    fileIC?: boolean
    fileBrokerLicense?: boolean
    propertiesListed?: boolean | Broker$propertiesListedArgs<ExtArgs>
    user?: boolean | usersDefaultArgs<ExtArgs>
    _count?: boolean | BrokerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["broker"]>

  export type BrokerSelectScalar = {
    broker_id?: boolean
    userID?: boolean
    fullName?: boolean
    brokerLicense?: boolean
    password?: boolean
    brokerIC?: boolean
    fileIC?: boolean
    fileBrokerLicense?: boolean
  }


  export type BrokerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    propertiesListed?: boolean | Broker$propertiesListedArgs<ExtArgs>
    user?: boolean | usersDefaultArgs<ExtArgs>
    _count?: boolean | BrokerCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BrokerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Broker"
    objects: {
      propertiesListed: Prisma.$PropertyPayload<ExtArgs>[]
      user: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      broker_id: string
      userID: string
      fullName: string
      brokerLicense: string
      password: string
      brokerIC: string
      fileIC: string
      fileBrokerLicense: string
    }, ExtArgs["result"]["broker"]>
    composites: {}
  }


  type BrokerGetPayload<S extends boolean | null | undefined | BrokerDefaultArgs> = $Result.GetResult<Prisma.$BrokerPayload, S>

  type BrokerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BrokerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BrokerCountAggregateInputType | true
    }

  export interface BrokerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Broker'], meta: { name: 'Broker' } }
    /**
     * Find zero or one Broker that matches the filter.
     * @param {BrokerFindUniqueArgs} args - Arguments to find a Broker
     * @example
     * // Get one Broker
     * const broker = await prisma.broker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BrokerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BrokerFindUniqueArgs<ExtArgs>>
    ): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Broker that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BrokerFindUniqueOrThrowArgs} args - Arguments to find a Broker
     * @example
     * // Get one Broker
     * const broker = await prisma.broker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BrokerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BrokerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Broker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerFindFirstArgs} args - Arguments to find a Broker
     * @example
     * // Get one Broker
     * const broker = await prisma.broker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BrokerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BrokerFindFirstArgs<ExtArgs>>
    ): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Broker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerFindFirstOrThrowArgs} args - Arguments to find a Broker
     * @example
     * // Get one Broker
     * const broker = await prisma.broker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BrokerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BrokerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Brokers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brokers
     * const brokers = await prisma.broker.findMany()
     * 
     * // Get first 10 Brokers
     * const brokers = await prisma.broker.findMany({ take: 10 })
     * 
     * // Only select the `broker_id`
     * const brokerWithBroker_idOnly = await prisma.broker.findMany({ select: { broker_id: true } })
     * 
    **/
    findMany<T extends BrokerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BrokerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Broker.
     * @param {BrokerCreateArgs} args - Arguments to create a Broker.
     * @example
     * // Create one Broker
     * const Broker = await prisma.broker.create({
     *   data: {
     *     // ... data to create a Broker
     *   }
     * })
     * 
    **/
    create<T extends BrokerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BrokerCreateArgs<ExtArgs>>
    ): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Brokers.
     * @param {BrokerCreateManyArgs} args - Arguments to create many Brokers.
     * @example
     * // Create many Brokers
     * const broker = await prisma.broker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends BrokerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BrokerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Broker.
     * @param {BrokerDeleteArgs} args - Arguments to delete one Broker.
     * @example
     * // Delete one Broker
     * const Broker = await prisma.broker.delete({
     *   where: {
     *     // ... filter to delete one Broker
     *   }
     * })
     * 
    **/
    delete<T extends BrokerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BrokerDeleteArgs<ExtArgs>>
    ): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Broker.
     * @param {BrokerUpdateArgs} args - Arguments to update one Broker.
     * @example
     * // Update one Broker
     * const broker = await prisma.broker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BrokerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BrokerUpdateArgs<ExtArgs>>
    ): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Brokers.
     * @param {BrokerDeleteManyArgs} args - Arguments to filter Brokers to delete.
     * @example
     * // Delete a few Brokers
     * const { count } = await prisma.broker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BrokerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BrokerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brokers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brokers
     * const broker = await prisma.broker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BrokerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BrokerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Broker.
     * @param {BrokerUpsertArgs} args - Arguments to update or create a Broker.
     * @example
     * // Update or create a Broker
     * const broker = await prisma.broker.upsert({
     *   create: {
     *     // ... data to create a Broker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Broker we want to update
     *   }
     * })
    **/
    upsert<T extends BrokerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BrokerUpsertArgs<ExtArgs>>
    ): Prisma__BrokerClient<$Result.GetResult<Prisma.$BrokerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Brokers that matches the filter.
     * @param {BrokerFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const broker = await prisma.broker.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: BrokerFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Broker.
     * @param {BrokerAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const broker = await prisma.broker.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: BrokerAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Brokers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerCountArgs} args - Arguments to filter Brokers to count.
     * @example
     * // Count the number of Brokers
     * const count = await prisma.broker.count({
     *   where: {
     *     // ... the filter for the Brokers we want to count
     *   }
     * })
    **/
    count<T extends BrokerCountArgs>(
      args?: Subset<T, BrokerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrokerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Broker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrokerAggregateArgs>(args: Subset<T, BrokerAggregateArgs>): Prisma.PrismaPromise<GetBrokerAggregateType<T>>

    /**
     * Group by Broker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrokerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrokerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrokerGroupByArgs['orderBy'] }
        : { orderBy?: BrokerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrokerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrokerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Broker model
   */
  readonly fields: BrokerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Broker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrokerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    propertiesListed<T extends Broker$propertiesListedArgs<ExtArgs> = {}>(args?: Subset<T, Broker$propertiesListedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findMany'> | Null>;

    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Broker model
   */ 
  interface BrokerFieldRefs {
    readonly broker_id: FieldRef<"Broker", 'String'>
    readonly userID: FieldRef<"Broker", 'String'>
    readonly fullName: FieldRef<"Broker", 'String'>
    readonly brokerLicense: FieldRef<"Broker", 'String'>
    readonly password: FieldRef<"Broker", 'String'>
    readonly brokerIC: FieldRef<"Broker", 'String'>
    readonly fileIC: FieldRef<"Broker", 'String'>
    readonly fileBrokerLicense: FieldRef<"Broker", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Broker findUnique
   */
  export type BrokerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * Filter, which Broker to fetch.
     */
    where: BrokerWhereUniqueInput
  }

  /**
   * Broker findUniqueOrThrow
   */
  export type BrokerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * Filter, which Broker to fetch.
     */
    where: BrokerWhereUniqueInput
  }

  /**
   * Broker findFirst
   */
  export type BrokerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * Filter, which Broker to fetch.
     */
    where?: BrokerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brokers to fetch.
     */
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brokers.
     */
    cursor?: BrokerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brokers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brokers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brokers.
     */
    distinct?: BrokerScalarFieldEnum | BrokerScalarFieldEnum[]
  }

  /**
   * Broker findFirstOrThrow
   */
  export type BrokerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * Filter, which Broker to fetch.
     */
    where?: BrokerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brokers to fetch.
     */
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brokers.
     */
    cursor?: BrokerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brokers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brokers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brokers.
     */
    distinct?: BrokerScalarFieldEnum | BrokerScalarFieldEnum[]
  }

  /**
   * Broker findMany
   */
  export type BrokerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * Filter, which Brokers to fetch.
     */
    where?: BrokerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brokers to fetch.
     */
    orderBy?: BrokerOrderByWithRelationInput | BrokerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brokers.
     */
    cursor?: BrokerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brokers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brokers.
     */
    skip?: number
    distinct?: BrokerScalarFieldEnum | BrokerScalarFieldEnum[]
  }

  /**
   * Broker create
   */
  export type BrokerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * The data needed to create a Broker.
     */
    data: XOR<BrokerCreateInput, BrokerUncheckedCreateInput>
  }

  /**
   * Broker createMany
   */
  export type BrokerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brokers.
     */
    data: BrokerCreateManyInput | BrokerCreateManyInput[]
  }

  /**
   * Broker update
   */
  export type BrokerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * The data needed to update a Broker.
     */
    data: XOR<BrokerUpdateInput, BrokerUncheckedUpdateInput>
    /**
     * Choose, which Broker to update.
     */
    where: BrokerWhereUniqueInput
  }

  /**
   * Broker updateMany
   */
  export type BrokerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brokers.
     */
    data: XOR<BrokerUpdateManyMutationInput, BrokerUncheckedUpdateManyInput>
    /**
     * Filter which Brokers to update
     */
    where?: BrokerWhereInput
  }

  /**
   * Broker upsert
   */
  export type BrokerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * The filter to search for the Broker to update in case it exists.
     */
    where: BrokerWhereUniqueInput
    /**
     * In case the Broker found by the `where` argument doesn't exist, create a new Broker with this data.
     */
    create: XOR<BrokerCreateInput, BrokerUncheckedCreateInput>
    /**
     * In case the Broker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrokerUpdateInput, BrokerUncheckedUpdateInput>
  }

  /**
   * Broker delete
   */
  export type BrokerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
    /**
     * Filter which Broker to delete.
     */
    where: BrokerWhereUniqueInput
  }

  /**
   * Broker deleteMany
   */
  export type BrokerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brokers to delete
     */
    where?: BrokerWhereInput
  }

  /**
   * Broker findRaw
   */
  export type BrokerFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Broker aggregateRaw
   */
  export type BrokerAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Broker.propertiesListed
   */
  export type Broker$propertiesListedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    where?: PropertyWhereInput
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    cursor?: PropertyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Broker without action
   */
  export type BrokerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Broker
     */
    select?: BrokerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrokerInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    phoneNumber: 'phoneNumber',
    location: 'location',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    favResidencieID: 'favResidencieID'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const PropertyScalarFieldEnum: {
    property_id: 'property_id',
    title: 'title',
    sellerID: 'sellerID',
    description: 'description',
    propertyType: 'propertyType',
    price: 'price',
    brokerID: 'brokerID',
    buyerID: 'buyerID',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    images: 'images',
    file: 'file',
    supportingDocuments: 'supportingDocuments'
  };

  export type PropertyScalarFieldEnum = (typeof PropertyScalarFieldEnum)[keyof typeof PropertyScalarFieldEnum]


  export const VehicleScalarFieldEnum: {
    vehicle_id: 'vehicle_id',
    propertyID: 'propertyID',
    vehicleType: 'vehicleType',
    brand: 'brand',
    model: 'model',
    seats: 'seats',
    mileage: 'mileage',
    ManufacturedYear: 'ManufacturedYear',
    cc: 'cc',
    condition: 'condition'
  };

  export type VehicleScalarFieldEnum = (typeof VehicleScalarFieldEnum)[keyof typeof VehicleScalarFieldEnum]


  export const LandScalarFieldEnum: {
    land_id: 'land_id',
    propertyID: 'propertyID',
    area: 'area',
    location: 'location',
    land_type: 'land_type',
    ownership_type: 'ownership_type'
  };

  export type LandScalarFieldEnum = (typeof LandScalarFieldEnum)[keyof typeof LandScalarFieldEnum]


  export const HouseScalarFieldEnum: {
    house_id: 'house_id',
    propertyID: 'propertyID',
    size: 'size',
    location: 'location',
    rooms: 'rooms',
    bathrooms: 'bathrooms'
  };

  export type HouseScalarFieldEnum = (typeof HouseScalarFieldEnum)[keyof typeof HouseScalarFieldEnum]


  export const BrokerScalarFieldEnum: {
    broker_id: 'broker_id',
    userID: 'userID',
    fullName: 'fullName',
    brokerLicense: 'brokerLicense',
    password: 'password',
    brokerIC: 'brokerIC',
    fileIC: 'fileIC',
    fileBrokerLicense: 'fileBrokerLicense'
  };

  export type BrokerScalarFieldEnum = (typeof BrokerScalarFieldEnum)[keyof typeof BrokerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'PropertyType'
   */
  export type EnumPropertyTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PropertyType'>
    


  /**
   * Reference to a field of type 'PropertyType[]'
   */
  export type ListEnumPropertyTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PropertyType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Condition'
   */
  export type EnumConditionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Condition'>
    


  /**
   * Reference to a field of type 'Condition[]'
   */
  export type ListEnumConditionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Condition[]'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: StringFilter<"users"> | string
    username?: StringFilter<"users"> | string
    firstName?: StringNullableFilter<"users"> | string | null
    lastName?: StringNullableFilter<"users"> | string | null
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    phoneNumber?: StringNullableFilter<"users"> | string | null
    location?: StringNullableFilter<"users"> | string | null
    description?: StringNullableFilter<"users"> | string | null
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    favResidencieID?: StringNullableListFilter<"users">
    properties_owned?: PropertyListRelationFilter
    properties_sell?: PropertyListRelationFilter
    broker?: XOR<BrokerNullableRelationFilter, BrokerWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    favResidencieID?: SortOrder
    properties_owned?: PropertyOrderByRelationAggregateInput
    properties_sell?: PropertyOrderByRelationAggregateInput
    broker?: BrokerOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    firstName?: StringNullableFilter<"users"> | string | null
    lastName?: StringNullableFilter<"users"> | string | null
    password?: StringFilter<"users"> | string
    phoneNumber?: StringNullableFilter<"users"> | string | null
    location?: StringNullableFilter<"users"> | string | null
    description?: StringNullableFilter<"users"> | string | null
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    favResidencieID?: StringNullableListFilter<"users">
    properties_owned?: PropertyListRelationFilter
    properties_sell?: PropertyListRelationFilter
    broker?: XOR<BrokerNullableRelationFilter, BrokerWhereInput> | null
  }, "id" | "username" | "email">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    favResidencieID?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"users"> | string
    username?: StringWithAggregatesFilter<"users"> | string
    firstName?: StringNullableWithAggregatesFilter<"users"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"users"> | string | null
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"users"> | string | null
    location?: StringNullableWithAggregatesFilter<"users"> | string | null
    description?: StringNullableWithAggregatesFilter<"users"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    favResidencieID?: StringNullableListFilter<"users">
  }

  export type PropertyWhereInput = {
    AND?: PropertyWhereInput | PropertyWhereInput[]
    OR?: PropertyWhereInput[]
    NOT?: PropertyWhereInput | PropertyWhereInput[]
    property_id?: StringFilter<"Property"> | string
    title?: StringFilter<"Property"> | string
    sellerID?: StringFilter<"Property"> | string
    description?: StringFilter<"Property"> | string
    propertyType?: EnumPropertyTypeFilter<"Property"> | $Enums.PropertyType
    price?: FloatFilter<"Property"> | number
    brokerID?: StringNullableFilter<"Property"> | string | null
    buyerID?: StringNullableFilter<"Property"> | string | null
    createdAt?: DateTimeFilter<"Property"> | Date | string
    updatedAt?: DateTimeFilter<"Property"> | Date | string
    images?: StringNullableListFilter<"Property">
    file?: StringNullableListFilter<"Property">
    supportingDocuments?: JsonNullableFilter<"Property">
    seller?: XOR<UsersRelationFilter, usersWhereInput>
    broker?: XOR<BrokerNullableRelationFilter, BrokerWhereInput> | null
    buyer?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    vehicle?: XOR<VehicleNullableRelationFilter, VehicleWhereInput> | null
    land?: XOR<LandNullableRelationFilter, LandWhereInput> | null
    house?: XOR<HouseNullableRelationFilter, HouseWhereInput> | null
  }

  export type PropertyOrderByWithRelationInput = {
    property_id?: SortOrder
    title?: SortOrder
    sellerID?: SortOrder
    description?: SortOrder
    propertyType?: SortOrder
    price?: SortOrder
    brokerID?: SortOrder
    buyerID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    images?: SortOrder
    file?: SortOrder
    supportingDocuments?: SortOrder
    seller?: usersOrderByWithRelationInput
    broker?: BrokerOrderByWithRelationInput
    buyer?: usersOrderByWithRelationInput
    vehicle?: VehicleOrderByWithRelationInput
    land?: LandOrderByWithRelationInput
    house?: HouseOrderByWithRelationInput
  }

  export type PropertyWhereUniqueInput = Prisma.AtLeast<{
    property_id?: string
    AND?: PropertyWhereInput | PropertyWhereInput[]
    OR?: PropertyWhereInput[]
    NOT?: PropertyWhereInput | PropertyWhereInput[]
    title?: StringFilter<"Property"> | string
    sellerID?: StringFilter<"Property"> | string
    description?: StringFilter<"Property"> | string
    propertyType?: EnumPropertyTypeFilter<"Property"> | $Enums.PropertyType
    price?: FloatFilter<"Property"> | number
    brokerID?: StringNullableFilter<"Property"> | string | null
    buyerID?: StringNullableFilter<"Property"> | string | null
    createdAt?: DateTimeFilter<"Property"> | Date | string
    updatedAt?: DateTimeFilter<"Property"> | Date | string
    images?: StringNullableListFilter<"Property">
    file?: StringNullableListFilter<"Property">
    supportingDocuments?: JsonNullableFilter<"Property">
    seller?: XOR<UsersRelationFilter, usersWhereInput>
    broker?: XOR<BrokerNullableRelationFilter, BrokerWhereInput> | null
    buyer?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    vehicle?: XOR<VehicleNullableRelationFilter, VehicleWhereInput> | null
    land?: XOR<LandNullableRelationFilter, LandWhereInput> | null
    house?: XOR<HouseNullableRelationFilter, HouseWhereInput> | null
  }, "property_id">

  export type PropertyOrderByWithAggregationInput = {
    property_id?: SortOrder
    title?: SortOrder
    sellerID?: SortOrder
    description?: SortOrder
    propertyType?: SortOrder
    price?: SortOrder
    brokerID?: SortOrder
    buyerID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    images?: SortOrder
    file?: SortOrder
    supportingDocuments?: SortOrder
    _count?: PropertyCountOrderByAggregateInput
    _avg?: PropertyAvgOrderByAggregateInput
    _max?: PropertyMaxOrderByAggregateInput
    _min?: PropertyMinOrderByAggregateInput
    _sum?: PropertySumOrderByAggregateInput
  }

  export type PropertyScalarWhereWithAggregatesInput = {
    AND?: PropertyScalarWhereWithAggregatesInput | PropertyScalarWhereWithAggregatesInput[]
    OR?: PropertyScalarWhereWithAggregatesInput[]
    NOT?: PropertyScalarWhereWithAggregatesInput | PropertyScalarWhereWithAggregatesInput[]
    property_id?: StringWithAggregatesFilter<"Property"> | string
    title?: StringWithAggregatesFilter<"Property"> | string
    sellerID?: StringWithAggregatesFilter<"Property"> | string
    description?: StringWithAggregatesFilter<"Property"> | string
    propertyType?: EnumPropertyTypeWithAggregatesFilter<"Property"> | $Enums.PropertyType
    price?: FloatWithAggregatesFilter<"Property"> | number
    brokerID?: StringNullableWithAggregatesFilter<"Property"> | string | null
    buyerID?: StringNullableWithAggregatesFilter<"Property"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Property"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Property"> | Date | string
    images?: StringNullableListFilter<"Property">
    file?: StringNullableListFilter<"Property">
    supportingDocuments?: JsonNullableWithAggregatesFilter<"Property">
  }

  export type VehicleWhereInput = {
    AND?: VehicleWhereInput | VehicleWhereInput[]
    OR?: VehicleWhereInput[]
    NOT?: VehicleWhereInput | VehicleWhereInput[]
    vehicle_id?: StringFilter<"Vehicle"> | string
    propertyID?: StringFilter<"Vehicle"> | string
    vehicleType?: StringFilter<"Vehicle"> | string
    brand?: StringFilter<"Vehicle"> | string
    model?: StringFilter<"Vehicle"> | string
    seats?: IntFilter<"Vehicle"> | number
    mileage?: IntFilter<"Vehicle"> | number
    ManufacturedYear?: IntFilter<"Vehicle"> | number
    cc?: IntFilter<"Vehicle"> | number
    condition?: EnumConditionFilter<"Vehicle"> | $Enums.Condition
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }

  export type VehicleOrderByWithRelationInput = {
    vehicle_id?: SortOrder
    propertyID?: SortOrder
    vehicleType?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    seats?: SortOrder
    mileage?: SortOrder
    ManufacturedYear?: SortOrder
    cc?: SortOrder
    condition?: SortOrder
    property?: PropertyOrderByWithRelationInput
  }

  export type VehicleWhereUniqueInput = Prisma.AtLeast<{
    vehicle_id?: string
    propertyID?: string
    AND?: VehicleWhereInput | VehicleWhereInput[]
    OR?: VehicleWhereInput[]
    NOT?: VehicleWhereInput | VehicleWhereInput[]
    vehicleType?: StringFilter<"Vehicle"> | string
    brand?: StringFilter<"Vehicle"> | string
    model?: StringFilter<"Vehicle"> | string
    seats?: IntFilter<"Vehicle"> | number
    mileage?: IntFilter<"Vehicle"> | number
    ManufacturedYear?: IntFilter<"Vehicle"> | number
    cc?: IntFilter<"Vehicle"> | number
    condition?: EnumConditionFilter<"Vehicle"> | $Enums.Condition
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }, "vehicle_id" | "propertyID">

  export type VehicleOrderByWithAggregationInput = {
    vehicle_id?: SortOrder
    propertyID?: SortOrder
    vehicleType?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    seats?: SortOrder
    mileage?: SortOrder
    ManufacturedYear?: SortOrder
    cc?: SortOrder
    condition?: SortOrder
    _count?: VehicleCountOrderByAggregateInput
    _avg?: VehicleAvgOrderByAggregateInput
    _max?: VehicleMaxOrderByAggregateInput
    _min?: VehicleMinOrderByAggregateInput
    _sum?: VehicleSumOrderByAggregateInput
  }

  export type VehicleScalarWhereWithAggregatesInput = {
    AND?: VehicleScalarWhereWithAggregatesInput | VehicleScalarWhereWithAggregatesInput[]
    OR?: VehicleScalarWhereWithAggregatesInput[]
    NOT?: VehicleScalarWhereWithAggregatesInput | VehicleScalarWhereWithAggregatesInput[]
    vehicle_id?: StringWithAggregatesFilter<"Vehicle"> | string
    propertyID?: StringWithAggregatesFilter<"Vehicle"> | string
    vehicleType?: StringWithAggregatesFilter<"Vehicle"> | string
    brand?: StringWithAggregatesFilter<"Vehicle"> | string
    model?: StringWithAggregatesFilter<"Vehicle"> | string
    seats?: IntWithAggregatesFilter<"Vehicle"> | number
    mileage?: IntWithAggregatesFilter<"Vehicle"> | number
    ManufacturedYear?: IntWithAggregatesFilter<"Vehicle"> | number
    cc?: IntWithAggregatesFilter<"Vehicle"> | number
    condition?: EnumConditionWithAggregatesFilter<"Vehicle"> | $Enums.Condition
  }

  export type LandWhereInput = {
    AND?: LandWhereInput | LandWhereInput[]
    OR?: LandWhereInput[]
    NOT?: LandWhereInput | LandWhereInput[]
    land_id?: StringFilter<"Land"> | string
    propertyID?: StringFilter<"Land"> | string
    area?: StringFilter<"Land"> | string
    location?: StringFilter<"Land"> | string
    land_type?: StringFilter<"Land"> | string
    ownership_type?: StringFilter<"Land"> | string
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }

  export type LandOrderByWithRelationInput = {
    land_id?: SortOrder
    propertyID?: SortOrder
    area?: SortOrder
    location?: SortOrder
    land_type?: SortOrder
    ownership_type?: SortOrder
    property?: PropertyOrderByWithRelationInput
  }

  export type LandWhereUniqueInput = Prisma.AtLeast<{
    land_id?: string
    propertyID?: string
    AND?: LandWhereInput | LandWhereInput[]
    OR?: LandWhereInput[]
    NOT?: LandWhereInput | LandWhereInput[]
    area?: StringFilter<"Land"> | string
    location?: StringFilter<"Land"> | string
    land_type?: StringFilter<"Land"> | string
    ownership_type?: StringFilter<"Land"> | string
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }, "land_id" | "propertyID">

  export type LandOrderByWithAggregationInput = {
    land_id?: SortOrder
    propertyID?: SortOrder
    area?: SortOrder
    location?: SortOrder
    land_type?: SortOrder
    ownership_type?: SortOrder
    _count?: LandCountOrderByAggregateInput
    _max?: LandMaxOrderByAggregateInput
    _min?: LandMinOrderByAggregateInput
  }

  export type LandScalarWhereWithAggregatesInput = {
    AND?: LandScalarWhereWithAggregatesInput | LandScalarWhereWithAggregatesInput[]
    OR?: LandScalarWhereWithAggregatesInput[]
    NOT?: LandScalarWhereWithAggregatesInput | LandScalarWhereWithAggregatesInput[]
    land_id?: StringWithAggregatesFilter<"Land"> | string
    propertyID?: StringWithAggregatesFilter<"Land"> | string
    area?: StringWithAggregatesFilter<"Land"> | string
    location?: StringWithAggregatesFilter<"Land"> | string
    land_type?: StringWithAggregatesFilter<"Land"> | string
    ownership_type?: StringWithAggregatesFilter<"Land"> | string
  }

  export type HouseWhereInput = {
    AND?: HouseWhereInput | HouseWhereInput[]
    OR?: HouseWhereInput[]
    NOT?: HouseWhereInput | HouseWhereInput[]
    house_id?: StringFilter<"House"> | string
    propertyID?: StringFilter<"House"> | string
    size?: FloatFilter<"House"> | number
    location?: StringFilter<"House"> | string
    rooms?: IntFilter<"House"> | number
    bathrooms?: IntFilter<"House"> | number
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }

  export type HouseOrderByWithRelationInput = {
    house_id?: SortOrder
    propertyID?: SortOrder
    size?: SortOrder
    location?: SortOrder
    rooms?: SortOrder
    bathrooms?: SortOrder
    property?: PropertyOrderByWithRelationInput
  }

  export type HouseWhereUniqueInput = Prisma.AtLeast<{
    house_id?: string
    propertyID?: string
    AND?: HouseWhereInput | HouseWhereInput[]
    OR?: HouseWhereInput[]
    NOT?: HouseWhereInput | HouseWhereInput[]
    size?: FloatFilter<"House"> | number
    location?: StringFilter<"House"> | string
    rooms?: IntFilter<"House"> | number
    bathrooms?: IntFilter<"House"> | number
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }, "house_id" | "propertyID">

  export type HouseOrderByWithAggregationInput = {
    house_id?: SortOrder
    propertyID?: SortOrder
    size?: SortOrder
    location?: SortOrder
    rooms?: SortOrder
    bathrooms?: SortOrder
    _count?: HouseCountOrderByAggregateInput
    _avg?: HouseAvgOrderByAggregateInput
    _max?: HouseMaxOrderByAggregateInput
    _min?: HouseMinOrderByAggregateInput
    _sum?: HouseSumOrderByAggregateInput
  }

  export type HouseScalarWhereWithAggregatesInput = {
    AND?: HouseScalarWhereWithAggregatesInput | HouseScalarWhereWithAggregatesInput[]
    OR?: HouseScalarWhereWithAggregatesInput[]
    NOT?: HouseScalarWhereWithAggregatesInput | HouseScalarWhereWithAggregatesInput[]
    house_id?: StringWithAggregatesFilter<"House"> | string
    propertyID?: StringWithAggregatesFilter<"House"> | string
    size?: FloatWithAggregatesFilter<"House"> | number
    location?: StringWithAggregatesFilter<"House"> | string
    rooms?: IntWithAggregatesFilter<"House"> | number
    bathrooms?: IntWithAggregatesFilter<"House"> | number
  }

  export type BrokerWhereInput = {
    AND?: BrokerWhereInput | BrokerWhereInput[]
    OR?: BrokerWhereInput[]
    NOT?: BrokerWhereInput | BrokerWhereInput[]
    broker_id?: StringFilter<"Broker"> | string
    userID?: StringFilter<"Broker"> | string
    fullName?: StringFilter<"Broker"> | string
    brokerLicense?: StringFilter<"Broker"> | string
    password?: StringFilter<"Broker"> | string
    brokerIC?: StringFilter<"Broker"> | string
    fileIC?: StringFilter<"Broker"> | string
    fileBrokerLicense?: StringFilter<"Broker"> | string
    propertiesListed?: PropertyListRelationFilter
    user?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type BrokerOrderByWithRelationInput = {
    broker_id?: SortOrder
    userID?: SortOrder
    fullName?: SortOrder
    brokerLicense?: SortOrder
    password?: SortOrder
    brokerIC?: SortOrder
    fileIC?: SortOrder
    fileBrokerLicense?: SortOrder
    propertiesListed?: PropertyOrderByRelationAggregateInput
    user?: usersOrderByWithRelationInput
  }

  export type BrokerWhereUniqueInput = Prisma.AtLeast<{
    broker_id?: string
    userID?: string
    AND?: BrokerWhereInput | BrokerWhereInput[]
    OR?: BrokerWhereInput[]
    NOT?: BrokerWhereInput | BrokerWhereInput[]
    fullName?: StringFilter<"Broker"> | string
    brokerLicense?: StringFilter<"Broker"> | string
    password?: StringFilter<"Broker"> | string
    brokerIC?: StringFilter<"Broker"> | string
    fileIC?: StringFilter<"Broker"> | string
    fileBrokerLicense?: StringFilter<"Broker"> | string
    propertiesListed?: PropertyListRelationFilter
    user?: XOR<UsersRelationFilter, usersWhereInput>
  }, "broker_id" | "userID">

  export type BrokerOrderByWithAggregationInput = {
    broker_id?: SortOrder
    userID?: SortOrder
    fullName?: SortOrder
    brokerLicense?: SortOrder
    password?: SortOrder
    brokerIC?: SortOrder
    fileIC?: SortOrder
    fileBrokerLicense?: SortOrder
    _count?: BrokerCountOrderByAggregateInput
    _max?: BrokerMaxOrderByAggregateInput
    _min?: BrokerMinOrderByAggregateInput
  }

  export type BrokerScalarWhereWithAggregatesInput = {
    AND?: BrokerScalarWhereWithAggregatesInput | BrokerScalarWhereWithAggregatesInput[]
    OR?: BrokerScalarWhereWithAggregatesInput[]
    NOT?: BrokerScalarWhereWithAggregatesInput | BrokerScalarWhereWithAggregatesInput[]
    broker_id?: StringWithAggregatesFilter<"Broker"> | string
    userID?: StringWithAggregatesFilter<"Broker"> | string
    fullName?: StringWithAggregatesFilter<"Broker"> | string
    brokerLicense?: StringWithAggregatesFilter<"Broker"> | string
    password?: StringWithAggregatesFilter<"Broker"> | string
    brokerIC?: StringWithAggregatesFilter<"Broker"> | string
    fileIC?: StringWithAggregatesFilter<"Broker"> | string
    fileBrokerLicense?: StringWithAggregatesFilter<"Broker"> | string
  }

  export type usersCreateInput = {
    id?: string
    username: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    phoneNumber?: string | null
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favResidencieID?: usersCreatefavResidencieIDInput | string[]
    properties_owned?: PropertyCreateNestedManyWithoutSellerInput
    properties_sell?: PropertyCreateNestedManyWithoutBuyerInput
    broker?: BrokerCreateNestedOneWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    id?: string
    username: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    phoneNumber?: string | null
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favResidencieID?: usersCreatefavResidencieIDInput | string[]
    properties_owned?: PropertyUncheckedCreateNestedManyWithoutSellerInput
    properties_sell?: PropertyUncheckedCreateNestedManyWithoutBuyerInput
    broker?: BrokerUncheckedCreateNestedOneWithoutUserInput
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favResidencieID?: usersUpdatefavResidencieIDInput | string[]
    properties_owned?: PropertyUpdateManyWithoutSellerNestedInput
    properties_sell?: PropertyUpdateManyWithoutBuyerNestedInput
    broker?: BrokerUpdateOneWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favResidencieID?: usersUpdatefavResidencieIDInput | string[]
    properties_owned?: PropertyUncheckedUpdateManyWithoutSellerNestedInput
    properties_sell?: PropertyUncheckedUpdateManyWithoutBuyerNestedInput
    broker?: BrokerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type usersCreateManyInput = {
    id?: string
    username: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    phoneNumber?: string | null
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favResidencieID?: usersCreatefavResidencieIDInput | string[]
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favResidencieID?: usersUpdatefavResidencieIDInput | string[]
  }

  export type usersUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favResidencieID?: usersUpdatefavResidencieIDInput | string[]
  }

  export type PropertyCreateInput = {
    property_id?: string
    title: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    seller: usersCreateNestedOneWithoutProperties_ownedInput
    broker?: BrokerCreateNestedOneWithoutPropertiesListedInput
    buyer?: usersCreateNestedOneWithoutProperties_sellInput
    vehicle?: VehicleCreateNestedOneWithoutPropertyInput
    land?: LandCreateNestedOneWithoutPropertyInput
    house?: HouseCreateNestedOneWithoutPropertyInput
  }

  export type PropertyUncheckedCreateInput = {
    property_id?: string
    title: string
    sellerID: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    brokerID?: string | null
    buyerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    vehicle?: VehicleUncheckedCreateNestedOneWithoutPropertyInput
    land?: LandUncheckedCreateNestedOneWithoutPropertyInput
    house?: HouseUncheckedCreateNestedOneWithoutPropertyInput
  }

  export type PropertyUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    seller?: usersUpdateOneRequiredWithoutProperties_ownedNestedInput
    broker?: BrokerUpdateOneWithoutPropertiesListedNestedInput
    buyer?: usersUpdateOneWithoutProperties_sellNestedInput
    vehicle?: VehicleUpdateOneWithoutPropertyNestedInput
    land?: LandUpdateOneWithoutPropertyNestedInput
    house?: HouseUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    sellerID?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    brokerID?: NullableStringFieldUpdateOperationsInput | string | null
    buyerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    vehicle?: VehicleUncheckedUpdateOneWithoutPropertyNestedInput
    land?: LandUncheckedUpdateOneWithoutPropertyNestedInput
    house?: HouseUncheckedUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyCreateManyInput = {
    property_id?: string
    title: string
    sellerID: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    brokerID?: string | null
    buyerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
  }

  export type PropertyUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
  }

  export type PropertyUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    sellerID?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    brokerID?: NullableStringFieldUpdateOperationsInput | string | null
    buyerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
  }

  export type VehicleCreateInput = {
    vehicle_id?: string
    vehicleType: string
    brand: string
    model: string
    seats: number
    mileage: number
    ManufacturedYear: number
    cc: number
    condition: $Enums.Condition
    property: PropertyCreateNestedOneWithoutVehicleInput
  }

  export type VehicleUncheckedCreateInput = {
    vehicle_id?: string
    propertyID: string
    vehicleType: string
    brand: string
    model: string
    seats: number
    mileage: number
    ManufacturedYear: number
    cc: number
    condition: $Enums.Condition
  }

  export type VehicleUpdateInput = {
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    seats?: IntFieldUpdateOperationsInput | number
    mileage?: IntFieldUpdateOperationsInput | number
    ManufacturedYear?: IntFieldUpdateOperationsInput | number
    cc?: IntFieldUpdateOperationsInput | number
    condition?: EnumConditionFieldUpdateOperationsInput | $Enums.Condition
    property?: PropertyUpdateOneRequiredWithoutVehicleNestedInput
  }

  export type VehicleUncheckedUpdateInput = {
    propertyID?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    seats?: IntFieldUpdateOperationsInput | number
    mileage?: IntFieldUpdateOperationsInput | number
    ManufacturedYear?: IntFieldUpdateOperationsInput | number
    cc?: IntFieldUpdateOperationsInput | number
    condition?: EnumConditionFieldUpdateOperationsInput | $Enums.Condition
  }

  export type VehicleCreateManyInput = {
    vehicle_id?: string
    propertyID: string
    vehicleType: string
    brand: string
    model: string
    seats: number
    mileage: number
    ManufacturedYear: number
    cc: number
    condition: $Enums.Condition
  }

  export type VehicleUpdateManyMutationInput = {
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    seats?: IntFieldUpdateOperationsInput | number
    mileage?: IntFieldUpdateOperationsInput | number
    ManufacturedYear?: IntFieldUpdateOperationsInput | number
    cc?: IntFieldUpdateOperationsInput | number
    condition?: EnumConditionFieldUpdateOperationsInput | $Enums.Condition
  }

  export type VehicleUncheckedUpdateManyInput = {
    propertyID?: StringFieldUpdateOperationsInput | string
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    seats?: IntFieldUpdateOperationsInput | number
    mileage?: IntFieldUpdateOperationsInput | number
    ManufacturedYear?: IntFieldUpdateOperationsInput | number
    cc?: IntFieldUpdateOperationsInput | number
    condition?: EnumConditionFieldUpdateOperationsInput | $Enums.Condition
  }

  export type LandCreateInput = {
    land_id?: string
    area: string
    location: string
    land_type: string
    ownership_type: string
    property: PropertyCreateNestedOneWithoutLandInput
  }

  export type LandUncheckedCreateInput = {
    land_id?: string
    propertyID: string
    area: string
    location: string
    land_type: string
    ownership_type: string
  }

  export type LandUpdateInput = {
    area?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    land_type?: StringFieldUpdateOperationsInput | string
    ownership_type?: StringFieldUpdateOperationsInput | string
    property?: PropertyUpdateOneRequiredWithoutLandNestedInput
  }

  export type LandUncheckedUpdateInput = {
    propertyID?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    land_type?: StringFieldUpdateOperationsInput | string
    ownership_type?: StringFieldUpdateOperationsInput | string
  }

  export type LandCreateManyInput = {
    land_id?: string
    propertyID: string
    area: string
    location: string
    land_type: string
    ownership_type: string
  }

  export type LandUpdateManyMutationInput = {
    area?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    land_type?: StringFieldUpdateOperationsInput | string
    ownership_type?: StringFieldUpdateOperationsInput | string
  }

  export type LandUncheckedUpdateManyInput = {
    propertyID?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    land_type?: StringFieldUpdateOperationsInput | string
    ownership_type?: StringFieldUpdateOperationsInput | string
  }

  export type HouseCreateInput = {
    house_id?: string
    size: number
    location: string
    rooms: number
    bathrooms: number
    property: PropertyCreateNestedOneWithoutHouseInput
  }

  export type HouseUncheckedCreateInput = {
    house_id?: string
    propertyID: string
    size: number
    location: string
    rooms: number
    bathrooms: number
  }

  export type HouseUpdateInput = {
    size?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    rooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    property?: PropertyUpdateOneRequiredWithoutHouseNestedInput
  }

  export type HouseUncheckedUpdateInput = {
    propertyID?: StringFieldUpdateOperationsInput | string
    size?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    rooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
  }

  export type HouseCreateManyInput = {
    house_id?: string
    propertyID: string
    size: number
    location: string
    rooms: number
    bathrooms: number
  }

  export type HouseUpdateManyMutationInput = {
    size?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    rooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
  }

  export type HouseUncheckedUpdateManyInput = {
    propertyID?: StringFieldUpdateOperationsInput | string
    size?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    rooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
  }

  export type BrokerCreateInput = {
    broker_id?: string
    fullName: string
    brokerLicense: string
    password: string
    brokerIC: string
    fileIC: string
    fileBrokerLicense: string
    propertiesListed?: PropertyCreateNestedManyWithoutBrokerInput
    user: usersCreateNestedOneWithoutBrokerInput
  }

  export type BrokerUncheckedCreateInput = {
    broker_id?: string
    userID: string
    fullName: string
    brokerLicense: string
    password: string
    brokerIC: string
    fileIC: string
    fileBrokerLicense: string
    propertiesListed?: PropertyUncheckedCreateNestedManyWithoutBrokerInput
  }

  export type BrokerUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    brokerLicense?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    brokerIC?: StringFieldUpdateOperationsInput | string
    fileIC?: StringFieldUpdateOperationsInput | string
    fileBrokerLicense?: StringFieldUpdateOperationsInput | string
    propertiesListed?: PropertyUpdateManyWithoutBrokerNestedInput
    user?: usersUpdateOneRequiredWithoutBrokerNestedInput
  }

  export type BrokerUncheckedUpdateInput = {
    userID?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    brokerLicense?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    brokerIC?: StringFieldUpdateOperationsInput | string
    fileIC?: StringFieldUpdateOperationsInput | string
    fileBrokerLicense?: StringFieldUpdateOperationsInput | string
    propertiesListed?: PropertyUncheckedUpdateManyWithoutBrokerNestedInput
  }

  export type BrokerCreateManyInput = {
    broker_id?: string
    userID: string
    fullName: string
    brokerLicense: string
    password: string
    brokerIC: string
    fileIC: string
    fileBrokerLicense: string
  }

  export type BrokerUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    brokerLicense?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    brokerIC?: StringFieldUpdateOperationsInput | string
    fileIC?: StringFieldUpdateOperationsInput | string
    fileBrokerLicense?: StringFieldUpdateOperationsInput | string
  }

  export type BrokerUncheckedUpdateManyInput = {
    userID?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    brokerLicense?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    brokerIC?: StringFieldUpdateOperationsInput | string
    fileIC?: StringFieldUpdateOperationsInput | string
    fileBrokerLicense?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type PropertyListRelationFilter = {
    every?: PropertyWhereInput
    some?: PropertyWhereInput
    none?: PropertyWhereInput
  }

  export type BrokerNullableRelationFilter = {
    is?: BrokerWhereInput | null
    isNot?: BrokerWhereInput | null
  }

  export type PropertyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    favResidencieID?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumPropertyTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PropertyType | EnumPropertyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PropertyType[] | ListEnumPropertyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PropertyType[] | ListEnumPropertyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPropertyTypeFilter<$PrismaModel> | $Enums.PropertyType
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type UsersNullableRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type VehicleNullableRelationFilter = {
    is?: VehicleWhereInput | null
    isNot?: VehicleWhereInput | null
  }

  export type LandNullableRelationFilter = {
    is?: LandWhereInput | null
    isNot?: LandWhereInput | null
  }

  export type HouseNullableRelationFilter = {
    is?: HouseWhereInput | null
    isNot?: HouseWhereInput | null
  }

  export type PropertyCountOrderByAggregateInput = {
    property_id?: SortOrder
    title?: SortOrder
    sellerID?: SortOrder
    description?: SortOrder
    propertyType?: SortOrder
    price?: SortOrder
    brokerID?: SortOrder
    buyerID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    images?: SortOrder
    file?: SortOrder
    supportingDocuments?: SortOrder
  }

  export type PropertyAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type PropertyMaxOrderByAggregateInput = {
    property_id?: SortOrder
    title?: SortOrder
    sellerID?: SortOrder
    description?: SortOrder
    propertyType?: SortOrder
    price?: SortOrder
    brokerID?: SortOrder
    buyerID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertyMinOrderByAggregateInput = {
    property_id?: SortOrder
    title?: SortOrder
    sellerID?: SortOrder
    description?: SortOrder
    propertyType?: SortOrder
    price?: SortOrder
    brokerID?: SortOrder
    buyerID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertySumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type EnumPropertyTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PropertyType | EnumPropertyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PropertyType[] | ListEnumPropertyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PropertyType[] | ListEnumPropertyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPropertyTypeWithAggregatesFilter<$PrismaModel> | $Enums.PropertyType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPropertyTypeFilter<$PrismaModel>
    _max?: NestedEnumPropertyTypeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumConditionFilter<$PrismaModel = never> = {
    equals?: $Enums.Condition | EnumConditionFieldRefInput<$PrismaModel>
    in?: $Enums.Condition[] | ListEnumConditionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Condition[] | ListEnumConditionFieldRefInput<$PrismaModel>
    not?: NestedEnumConditionFilter<$PrismaModel> | $Enums.Condition
  }

  export type PropertyRelationFilter = {
    is?: PropertyWhereInput
    isNot?: PropertyWhereInput
  }

  export type VehicleCountOrderByAggregateInput = {
    vehicle_id?: SortOrder
    propertyID?: SortOrder
    vehicleType?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    seats?: SortOrder
    mileage?: SortOrder
    ManufacturedYear?: SortOrder
    cc?: SortOrder
    condition?: SortOrder
  }

  export type VehicleAvgOrderByAggregateInput = {
    seats?: SortOrder
    mileage?: SortOrder
    ManufacturedYear?: SortOrder
    cc?: SortOrder
  }

  export type VehicleMaxOrderByAggregateInput = {
    vehicle_id?: SortOrder
    propertyID?: SortOrder
    vehicleType?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    seats?: SortOrder
    mileage?: SortOrder
    ManufacturedYear?: SortOrder
    cc?: SortOrder
    condition?: SortOrder
  }

  export type VehicleMinOrderByAggregateInput = {
    vehicle_id?: SortOrder
    propertyID?: SortOrder
    vehicleType?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    seats?: SortOrder
    mileage?: SortOrder
    ManufacturedYear?: SortOrder
    cc?: SortOrder
    condition?: SortOrder
  }

  export type VehicleSumOrderByAggregateInput = {
    seats?: SortOrder
    mileage?: SortOrder
    ManufacturedYear?: SortOrder
    cc?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumConditionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Condition | EnumConditionFieldRefInput<$PrismaModel>
    in?: $Enums.Condition[] | ListEnumConditionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Condition[] | ListEnumConditionFieldRefInput<$PrismaModel>
    not?: NestedEnumConditionWithAggregatesFilter<$PrismaModel> | $Enums.Condition
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConditionFilter<$PrismaModel>
    _max?: NestedEnumConditionFilter<$PrismaModel>
  }

  export type LandCountOrderByAggregateInput = {
    land_id?: SortOrder
    propertyID?: SortOrder
    area?: SortOrder
    location?: SortOrder
    land_type?: SortOrder
    ownership_type?: SortOrder
  }

  export type LandMaxOrderByAggregateInput = {
    land_id?: SortOrder
    propertyID?: SortOrder
    area?: SortOrder
    location?: SortOrder
    land_type?: SortOrder
    ownership_type?: SortOrder
  }

  export type LandMinOrderByAggregateInput = {
    land_id?: SortOrder
    propertyID?: SortOrder
    area?: SortOrder
    location?: SortOrder
    land_type?: SortOrder
    ownership_type?: SortOrder
  }

  export type HouseCountOrderByAggregateInput = {
    house_id?: SortOrder
    propertyID?: SortOrder
    size?: SortOrder
    location?: SortOrder
    rooms?: SortOrder
    bathrooms?: SortOrder
  }

  export type HouseAvgOrderByAggregateInput = {
    size?: SortOrder
    rooms?: SortOrder
    bathrooms?: SortOrder
  }

  export type HouseMaxOrderByAggregateInput = {
    house_id?: SortOrder
    propertyID?: SortOrder
    size?: SortOrder
    location?: SortOrder
    rooms?: SortOrder
    bathrooms?: SortOrder
  }

  export type HouseMinOrderByAggregateInput = {
    house_id?: SortOrder
    propertyID?: SortOrder
    size?: SortOrder
    location?: SortOrder
    rooms?: SortOrder
    bathrooms?: SortOrder
  }

  export type HouseSumOrderByAggregateInput = {
    size?: SortOrder
    rooms?: SortOrder
    bathrooms?: SortOrder
  }

  export type BrokerCountOrderByAggregateInput = {
    broker_id?: SortOrder
    userID?: SortOrder
    fullName?: SortOrder
    brokerLicense?: SortOrder
    password?: SortOrder
    brokerIC?: SortOrder
    fileIC?: SortOrder
    fileBrokerLicense?: SortOrder
  }

  export type BrokerMaxOrderByAggregateInput = {
    broker_id?: SortOrder
    userID?: SortOrder
    fullName?: SortOrder
    brokerLicense?: SortOrder
    password?: SortOrder
    brokerIC?: SortOrder
    fileIC?: SortOrder
    fileBrokerLicense?: SortOrder
  }

  export type BrokerMinOrderByAggregateInput = {
    broker_id?: SortOrder
    userID?: SortOrder
    fullName?: SortOrder
    brokerLicense?: SortOrder
    password?: SortOrder
    brokerIC?: SortOrder
    fileIC?: SortOrder
    fileBrokerLicense?: SortOrder
  }

  export type usersCreatefavResidencieIDInput = {
    set: string[]
  }

  export type PropertyCreateNestedManyWithoutSellerInput = {
    create?: XOR<PropertyCreateWithoutSellerInput, PropertyUncheckedCreateWithoutSellerInput> | PropertyCreateWithoutSellerInput[] | PropertyUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutSellerInput | PropertyCreateOrConnectWithoutSellerInput[]
    createMany?: PropertyCreateManySellerInputEnvelope
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
  }

  export type PropertyCreateNestedManyWithoutBuyerInput = {
    create?: XOR<PropertyCreateWithoutBuyerInput, PropertyUncheckedCreateWithoutBuyerInput> | PropertyCreateWithoutBuyerInput[] | PropertyUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutBuyerInput | PropertyCreateOrConnectWithoutBuyerInput[]
    createMany?: PropertyCreateManyBuyerInputEnvelope
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
  }

  export type BrokerCreateNestedOneWithoutUserInput = {
    create?: XOR<BrokerCreateWithoutUserInput, BrokerUncheckedCreateWithoutUserInput>
    connectOrCreate?: BrokerCreateOrConnectWithoutUserInput
    connect?: BrokerWhereUniqueInput
  }

  export type PropertyUncheckedCreateNestedManyWithoutSellerInput = {
    create?: XOR<PropertyCreateWithoutSellerInput, PropertyUncheckedCreateWithoutSellerInput> | PropertyCreateWithoutSellerInput[] | PropertyUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutSellerInput | PropertyCreateOrConnectWithoutSellerInput[]
    createMany?: PropertyCreateManySellerInputEnvelope
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
  }

  export type PropertyUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<PropertyCreateWithoutBuyerInput, PropertyUncheckedCreateWithoutBuyerInput> | PropertyCreateWithoutBuyerInput[] | PropertyUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutBuyerInput | PropertyCreateOrConnectWithoutBuyerInput[]
    createMany?: PropertyCreateManyBuyerInputEnvelope
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
  }

  export type BrokerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<BrokerCreateWithoutUserInput, BrokerUncheckedCreateWithoutUserInput>
    connectOrCreate?: BrokerCreateOrConnectWithoutUserInput
    connect?: BrokerWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usersUpdatefavResidencieIDInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PropertyUpdateManyWithoutSellerNestedInput = {
    create?: XOR<PropertyCreateWithoutSellerInput, PropertyUncheckedCreateWithoutSellerInput> | PropertyCreateWithoutSellerInput[] | PropertyUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutSellerInput | PropertyCreateOrConnectWithoutSellerInput[]
    upsert?: PropertyUpsertWithWhereUniqueWithoutSellerInput | PropertyUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: PropertyCreateManySellerInputEnvelope
    set?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    disconnect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    delete?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    update?: PropertyUpdateWithWhereUniqueWithoutSellerInput | PropertyUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: PropertyUpdateManyWithWhereWithoutSellerInput | PropertyUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
  }

  export type PropertyUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<PropertyCreateWithoutBuyerInput, PropertyUncheckedCreateWithoutBuyerInput> | PropertyCreateWithoutBuyerInput[] | PropertyUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutBuyerInput | PropertyCreateOrConnectWithoutBuyerInput[]
    upsert?: PropertyUpsertWithWhereUniqueWithoutBuyerInput | PropertyUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: PropertyCreateManyBuyerInputEnvelope
    set?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    disconnect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    delete?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    update?: PropertyUpdateWithWhereUniqueWithoutBuyerInput | PropertyUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: PropertyUpdateManyWithWhereWithoutBuyerInput | PropertyUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
  }

  export type BrokerUpdateOneWithoutUserNestedInput = {
    create?: XOR<BrokerCreateWithoutUserInput, BrokerUncheckedCreateWithoutUserInput>
    connectOrCreate?: BrokerCreateOrConnectWithoutUserInput
    upsert?: BrokerUpsertWithoutUserInput
    disconnect?: BrokerWhereInput | boolean
    delete?: BrokerWhereInput | boolean
    connect?: BrokerWhereUniqueInput
    update?: XOR<XOR<BrokerUpdateToOneWithWhereWithoutUserInput, BrokerUpdateWithoutUserInput>, BrokerUncheckedUpdateWithoutUserInput>
  }

  export type PropertyUncheckedUpdateManyWithoutSellerNestedInput = {
    create?: XOR<PropertyCreateWithoutSellerInput, PropertyUncheckedCreateWithoutSellerInput> | PropertyCreateWithoutSellerInput[] | PropertyUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutSellerInput | PropertyCreateOrConnectWithoutSellerInput[]
    upsert?: PropertyUpsertWithWhereUniqueWithoutSellerInput | PropertyUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: PropertyCreateManySellerInputEnvelope
    set?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    disconnect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    delete?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    update?: PropertyUpdateWithWhereUniqueWithoutSellerInput | PropertyUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: PropertyUpdateManyWithWhereWithoutSellerInput | PropertyUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
  }

  export type PropertyUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<PropertyCreateWithoutBuyerInput, PropertyUncheckedCreateWithoutBuyerInput> | PropertyCreateWithoutBuyerInput[] | PropertyUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutBuyerInput | PropertyCreateOrConnectWithoutBuyerInput[]
    upsert?: PropertyUpsertWithWhereUniqueWithoutBuyerInput | PropertyUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: PropertyCreateManyBuyerInputEnvelope
    set?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    disconnect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    delete?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    update?: PropertyUpdateWithWhereUniqueWithoutBuyerInput | PropertyUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: PropertyUpdateManyWithWhereWithoutBuyerInput | PropertyUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
  }

  export type BrokerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<BrokerCreateWithoutUserInput, BrokerUncheckedCreateWithoutUserInput>
    connectOrCreate?: BrokerCreateOrConnectWithoutUserInput
    upsert?: BrokerUpsertWithoutUserInput
    disconnect?: BrokerWhereInput | boolean
    delete?: BrokerWhereInput | boolean
    connect?: BrokerWhereUniqueInput
    update?: XOR<XOR<BrokerUpdateToOneWithWhereWithoutUserInput, BrokerUpdateWithoutUserInput>, BrokerUncheckedUpdateWithoutUserInput>
  }

  export type PropertyCreateimagesInput = {
    set: string[]
  }

  export type PropertyCreatefileInput = {
    set: string[]
  }

  export type usersCreateNestedOneWithoutProperties_ownedInput = {
    create?: XOR<usersCreateWithoutProperties_ownedInput, usersUncheckedCreateWithoutProperties_ownedInput>
    connectOrCreate?: usersCreateOrConnectWithoutProperties_ownedInput
    connect?: usersWhereUniqueInput
  }

  export type BrokerCreateNestedOneWithoutPropertiesListedInput = {
    create?: XOR<BrokerCreateWithoutPropertiesListedInput, BrokerUncheckedCreateWithoutPropertiesListedInput>
    connectOrCreate?: BrokerCreateOrConnectWithoutPropertiesListedInput
    connect?: BrokerWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutProperties_sellInput = {
    create?: XOR<usersCreateWithoutProperties_sellInput, usersUncheckedCreateWithoutProperties_sellInput>
    connectOrCreate?: usersCreateOrConnectWithoutProperties_sellInput
    connect?: usersWhereUniqueInput
  }

  export type VehicleCreateNestedOneWithoutPropertyInput = {
    create?: XOR<VehicleCreateWithoutPropertyInput, VehicleUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: VehicleCreateOrConnectWithoutPropertyInput
    connect?: VehicleWhereUniqueInput
  }

  export type LandCreateNestedOneWithoutPropertyInput = {
    create?: XOR<LandCreateWithoutPropertyInput, LandUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: LandCreateOrConnectWithoutPropertyInput
    connect?: LandWhereUniqueInput
  }

  export type HouseCreateNestedOneWithoutPropertyInput = {
    create?: XOR<HouseCreateWithoutPropertyInput, HouseUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: HouseCreateOrConnectWithoutPropertyInput
    connect?: HouseWhereUniqueInput
  }

  export type VehicleUncheckedCreateNestedOneWithoutPropertyInput = {
    create?: XOR<VehicleCreateWithoutPropertyInput, VehicleUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: VehicleCreateOrConnectWithoutPropertyInput
    connect?: VehicleWhereUniqueInput
  }

  export type LandUncheckedCreateNestedOneWithoutPropertyInput = {
    create?: XOR<LandCreateWithoutPropertyInput, LandUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: LandCreateOrConnectWithoutPropertyInput
    connect?: LandWhereUniqueInput
  }

  export type HouseUncheckedCreateNestedOneWithoutPropertyInput = {
    create?: XOR<HouseCreateWithoutPropertyInput, HouseUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: HouseCreateOrConnectWithoutPropertyInput
    connect?: HouseWhereUniqueInput
  }

  export type EnumPropertyTypeFieldUpdateOperationsInput = {
    set?: $Enums.PropertyType
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PropertyUpdateimagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PropertyUpdatefileInput = {
    set?: string[]
    push?: string | string[]
  }

  export type usersUpdateOneRequiredWithoutProperties_ownedNestedInput = {
    create?: XOR<usersCreateWithoutProperties_ownedInput, usersUncheckedCreateWithoutProperties_ownedInput>
    connectOrCreate?: usersCreateOrConnectWithoutProperties_ownedInput
    upsert?: usersUpsertWithoutProperties_ownedInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutProperties_ownedInput, usersUpdateWithoutProperties_ownedInput>, usersUncheckedUpdateWithoutProperties_ownedInput>
  }

  export type BrokerUpdateOneWithoutPropertiesListedNestedInput = {
    create?: XOR<BrokerCreateWithoutPropertiesListedInput, BrokerUncheckedCreateWithoutPropertiesListedInput>
    connectOrCreate?: BrokerCreateOrConnectWithoutPropertiesListedInput
    upsert?: BrokerUpsertWithoutPropertiesListedInput
    disconnect?: boolean
    delete?: BrokerWhereInput | boolean
    connect?: BrokerWhereUniqueInput
    update?: XOR<XOR<BrokerUpdateToOneWithWhereWithoutPropertiesListedInput, BrokerUpdateWithoutPropertiesListedInput>, BrokerUncheckedUpdateWithoutPropertiesListedInput>
  }

  export type usersUpdateOneWithoutProperties_sellNestedInput = {
    create?: XOR<usersCreateWithoutProperties_sellInput, usersUncheckedCreateWithoutProperties_sellInput>
    connectOrCreate?: usersCreateOrConnectWithoutProperties_sellInput
    upsert?: usersUpsertWithoutProperties_sellInput
    disconnect?: boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutProperties_sellInput, usersUpdateWithoutProperties_sellInput>, usersUncheckedUpdateWithoutProperties_sellInput>
  }

  export type VehicleUpdateOneWithoutPropertyNestedInput = {
    create?: XOR<VehicleCreateWithoutPropertyInput, VehicleUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: VehicleCreateOrConnectWithoutPropertyInput
    upsert?: VehicleUpsertWithoutPropertyInput
    disconnect?: VehicleWhereInput | boolean
    delete?: VehicleWhereInput | boolean
    connect?: VehicleWhereUniqueInput
    update?: XOR<XOR<VehicleUpdateToOneWithWhereWithoutPropertyInput, VehicleUpdateWithoutPropertyInput>, VehicleUncheckedUpdateWithoutPropertyInput>
  }

  export type LandUpdateOneWithoutPropertyNestedInput = {
    create?: XOR<LandCreateWithoutPropertyInput, LandUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: LandCreateOrConnectWithoutPropertyInput
    upsert?: LandUpsertWithoutPropertyInput
    disconnect?: LandWhereInput | boolean
    delete?: LandWhereInput | boolean
    connect?: LandWhereUniqueInput
    update?: XOR<XOR<LandUpdateToOneWithWhereWithoutPropertyInput, LandUpdateWithoutPropertyInput>, LandUncheckedUpdateWithoutPropertyInput>
  }

  export type HouseUpdateOneWithoutPropertyNestedInput = {
    create?: XOR<HouseCreateWithoutPropertyInput, HouseUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: HouseCreateOrConnectWithoutPropertyInput
    upsert?: HouseUpsertWithoutPropertyInput
    disconnect?: HouseWhereInput | boolean
    delete?: HouseWhereInput | boolean
    connect?: HouseWhereUniqueInput
    update?: XOR<XOR<HouseUpdateToOneWithWhereWithoutPropertyInput, HouseUpdateWithoutPropertyInput>, HouseUncheckedUpdateWithoutPropertyInput>
  }

  export type VehicleUncheckedUpdateOneWithoutPropertyNestedInput = {
    create?: XOR<VehicleCreateWithoutPropertyInput, VehicleUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: VehicleCreateOrConnectWithoutPropertyInput
    upsert?: VehicleUpsertWithoutPropertyInput
    disconnect?: VehicleWhereInput | boolean
    delete?: VehicleWhereInput | boolean
    connect?: VehicleWhereUniqueInput
    update?: XOR<XOR<VehicleUpdateToOneWithWhereWithoutPropertyInput, VehicleUpdateWithoutPropertyInput>, VehicleUncheckedUpdateWithoutPropertyInput>
  }

  export type LandUncheckedUpdateOneWithoutPropertyNestedInput = {
    create?: XOR<LandCreateWithoutPropertyInput, LandUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: LandCreateOrConnectWithoutPropertyInput
    upsert?: LandUpsertWithoutPropertyInput
    disconnect?: LandWhereInput | boolean
    delete?: LandWhereInput | boolean
    connect?: LandWhereUniqueInput
    update?: XOR<XOR<LandUpdateToOneWithWhereWithoutPropertyInput, LandUpdateWithoutPropertyInput>, LandUncheckedUpdateWithoutPropertyInput>
  }

  export type HouseUncheckedUpdateOneWithoutPropertyNestedInput = {
    create?: XOR<HouseCreateWithoutPropertyInput, HouseUncheckedCreateWithoutPropertyInput>
    connectOrCreate?: HouseCreateOrConnectWithoutPropertyInput
    upsert?: HouseUpsertWithoutPropertyInput
    disconnect?: HouseWhereInput | boolean
    delete?: HouseWhereInput | boolean
    connect?: HouseWhereUniqueInput
    update?: XOR<XOR<HouseUpdateToOneWithWhereWithoutPropertyInput, HouseUpdateWithoutPropertyInput>, HouseUncheckedUpdateWithoutPropertyInput>
  }

  export type PropertyCreateNestedOneWithoutVehicleInput = {
    create?: XOR<PropertyCreateWithoutVehicleInput, PropertyUncheckedCreateWithoutVehicleInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutVehicleInput
    connect?: PropertyWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumConditionFieldUpdateOperationsInput = {
    set?: $Enums.Condition
  }

  export type PropertyUpdateOneRequiredWithoutVehicleNestedInput = {
    create?: XOR<PropertyCreateWithoutVehicleInput, PropertyUncheckedCreateWithoutVehicleInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutVehicleInput
    upsert?: PropertyUpsertWithoutVehicleInput
    connect?: PropertyWhereUniqueInput
    update?: XOR<XOR<PropertyUpdateToOneWithWhereWithoutVehicleInput, PropertyUpdateWithoutVehicleInput>, PropertyUncheckedUpdateWithoutVehicleInput>
  }

  export type PropertyCreateNestedOneWithoutLandInput = {
    create?: XOR<PropertyCreateWithoutLandInput, PropertyUncheckedCreateWithoutLandInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutLandInput
    connect?: PropertyWhereUniqueInput
  }

  export type PropertyUpdateOneRequiredWithoutLandNestedInput = {
    create?: XOR<PropertyCreateWithoutLandInput, PropertyUncheckedCreateWithoutLandInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutLandInput
    upsert?: PropertyUpsertWithoutLandInput
    connect?: PropertyWhereUniqueInput
    update?: XOR<XOR<PropertyUpdateToOneWithWhereWithoutLandInput, PropertyUpdateWithoutLandInput>, PropertyUncheckedUpdateWithoutLandInput>
  }

  export type PropertyCreateNestedOneWithoutHouseInput = {
    create?: XOR<PropertyCreateWithoutHouseInput, PropertyUncheckedCreateWithoutHouseInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutHouseInput
    connect?: PropertyWhereUniqueInput
  }

  export type PropertyUpdateOneRequiredWithoutHouseNestedInput = {
    create?: XOR<PropertyCreateWithoutHouseInput, PropertyUncheckedCreateWithoutHouseInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutHouseInput
    upsert?: PropertyUpsertWithoutHouseInput
    connect?: PropertyWhereUniqueInput
    update?: XOR<XOR<PropertyUpdateToOneWithWhereWithoutHouseInput, PropertyUpdateWithoutHouseInput>, PropertyUncheckedUpdateWithoutHouseInput>
  }

  export type PropertyCreateNestedManyWithoutBrokerInput = {
    create?: XOR<PropertyCreateWithoutBrokerInput, PropertyUncheckedCreateWithoutBrokerInput> | PropertyCreateWithoutBrokerInput[] | PropertyUncheckedCreateWithoutBrokerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutBrokerInput | PropertyCreateOrConnectWithoutBrokerInput[]
    createMany?: PropertyCreateManyBrokerInputEnvelope
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutBrokerInput = {
    create?: XOR<usersCreateWithoutBrokerInput, usersUncheckedCreateWithoutBrokerInput>
    connectOrCreate?: usersCreateOrConnectWithoutBrokerInput
    connect?: usersWhereUniqueInput
  }

  export type PropertyUncheckedCreateNestedManyWithoutBrokerInput = {
    create?: XOR<PropertyCreateWithoutBrokerInput, PropertyUncheckedCreateWithoutBrokerInput> | PropertyCreateWithoutBrokerInput[] | PropertyUncheckedCreateWithoutBrokerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutBrokerInput | PropertyCreateOrConnectWithoutBrokerInput[]
    createMany?: PropertyCreateManyBrokerInputEnvelope
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
  }

  export type PropertyUpdateManyWithoutBrokerNestedInput = {
    create?: XOR<PropertyCreateWithoutBrokerInput, PropertyUncheckedCreateWithoutBrokerInput> | PropertyCreateWithoutBrokerInput[] | PropertyUncheckedCreateWithoutBrokerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutBrokerInput | PropertyCreateOrConnectWithoutBrokerInput[]
    upsert?: PropertyUpsertWithWhereUniqueWithoutBrokerInput | PropertyUpsertWithWhereUniqueWithoutBrokerInput[]
    createMany?: PropertyCreateManyBrokerInputEnvelope
    set?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    disconnect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    delete?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    update?: PropertyUpdateWithWhereUniqueWithoutBrokerInput | PropertyUpdateWithWhereUniqueWithoutBrokerInput[]
    updateMany?: PropertyUpdateManyWithWhereWithoutBrokerInput | PropertyUpdateManyWithWhereWithoutBrokerInput[]
    deleteMany?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
  }

  export type usersUpdateOneRequiredWithoutBrokerNestedInput = {
    create?: XOR<usersCreateWithoutBrokerInput, usersUncheckedCreateWithoutBrokerInput>
    connectOrCreate?: usersCreateOrConnectWithoutBrokerInput
    upsert?: usersUpsertWithoutBrokerInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutBrokerInput, usersUpdateWithoutBrokerInput>, usersUncheckedUpdateWithoutBrokerInput>
  }

  export type PropertyUncheckedUpdateManyWithoutBrokerNestedInput = {
    create?: XOR<PropertyCreateWithoutBrokerInput, PropertyUncheckedCreateWithoutBrokerInput> | PropertyCreateWithoutBrokerInput[] | PropertyUncheckedCreateWithoutBrokerInput[]
    connectOrCreate?: PropertyCreateOrConnectWithoutBrokerInput | PropertyCreateOrConnectWithoutBrokerInput[]
    upsert?: PropertyUpsertWithWhereUniqueWithoutBrokerInput | PropertyUpsertWithWhereUniqueWithoutBrokerInput[]
    createMany?: PropertyCreateManyBrokerInputEnvelope
    set?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    disconnect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    delete?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    connect?: PropertyWhereUniqueInput | PropertyWhereUniqueInput[]
    update?: PropertyUpdateWithWhereUniqueWithoutBrokerInput | PropertyUpdateWithWhereUniqueWithoutBrokerInput[]
    updateMany?: PropertyUpdateManyWithWhereWithoutBrokerInput | PropertyUpdateManyWithWhereWithoutBrokerInput[]
    deleteMany?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumPropertyTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PropertyType | EnumPropertyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PropertyType[] | ListEnumPropertyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PropertyType[] | ListEnumPropertyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPropertyTypeFilter<$PrismaModel> | $Enums.PropertyType
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumPropertyTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PropertyType | EnumPropertyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PropertyType[] | ListEnumPropertyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PropertyType[] | ListEnumPropertyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPropertyTypeWithAggregatesFilter<$PrismaModel> | $Enums.PropertyType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPropertyTypeFilter<$PrismaModel>
    _max?: NestedEnumPropertyTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type NestedEnumConditionFilter<$PrismaModel = never> = {
    equals?: $Enums.Condition | EnumConditionFieldRefInput<$PrismaModel>
    in?: $Enums.Condition[] | ListEnumConditionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Condition[] | ListEnumConditionFieldRefInput<$PrismaModel>
    not?: NestedEnumConditionFilter<$PrismaModel> | $Enums.Condition
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumConditionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Condition | EnumConditionFieldRefInput<$PrismaModel>
    in?: $Enums.Condition[] | ListEnumConditionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Condition[] | ListEnumConditionFieldRefInput<$PrismaModel>
    not?: NestedEnumConditionWithAggregatesFilter<$PrismaModel> | $Enums.Condition
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConditionFilter<$PrismaModel>
    _max?: NestedEnumConditionFilter<$PrismaModel>
  }

  export type PropertyCreateWithoutSellerInput = {
    property_id?: string
    title: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    broker?: BrokerCreateNestedOneWithoutPropertiesListedInput
    buyer?: usersCreateNestedOneWithoutProperties_sellInput
    vehicle?: VehicleCreateNestedOneWithoutPropertyInput
    land?: LandCreateNestedOneWithoutPropertyInput
    house?: HouseCreateNestedOneWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutSellerInput = {
    property_id?: string
    title: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    brokerID?: string | null
    buyerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    vehicle?: VehicleUncheckedCreateNestedOneWithoutPropertyInput
    land?: LandUncheckedCreateNestedOneWithoutPropertyInput
    house?: HouseUncheckedCreateNestedOneWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutSellerInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutSellerInput, PropertyUncheckedCreateWithoutSellerInput>
  }

  export type PropertyCreateManySellerInputEnvelope = {
    data: PropertyCreateManySellerInput | PropertyCreateManySellerInput[]
  }

  export type PropertyCreateWithoutBuyerInput = {
    property_id?: string
    title: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    seller: usersCreateNestedOneWithoutProperties_ownedInput
    broker?: BrokerCreateNestedOneWithoutPropertiesListedInput
    vehicle?: VehicleCreateNestedOneWithoutPropertyInput
    land?: LandCreateNestedOneWithoutPropertyInput
    house?: HouseCreateNestedOneWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutBuyerInput = {
    property_id?: string
    title: string
    sellerID: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    brokerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    vehicle?: VehicleUncheckedCreateNestedOneWithoutPropertyInput
    land?: LandUncheckedCreateNestedOneWithoutPropertyInput
    house?: HouseUncheckedCreateNestedOneWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutBuyerInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutBuyerInput, PropertyUncheckedCreateWithoutBuyerInput>
  }

  export type PropertyCreateManyBuyerInputEnvelope = {
    data: PropertyCreateManyBuyerInput | PropertyCreateManyBuyerInput[]
  }

  export type BrokerCreateWithoutUserInput = {
    broker_id?: string
    fullName: string
    brokerLicense: string
    password: string
    brokerIC: string
    fileIC: string
    fileBrokerLicense: string
    propertiesListed?: PropertyCreateNestedManyWithoutBrokerInput
  }

  export type BrokerUncheckedCreateWithoutUserInput = {
    broker_id?: string
    fullName: string
    brokerLicense: string
    password: string
    brokerIC: string
    fileIC: string
    fileBrokerLicense: string
    propertiesListed?: PropertyUncheckedCreateNestedManyWithoutBrokerInput
  }

  export type BrokerCreateOrConnectWithoutUserInput = {
    where: BrokerWhereUniqueInput
    create: XOR<BrokerCreateWithoutUserInput, BrokerUncheckedCreateWithoutUserInput>
  }

  export type PropertyUpsertWithWhereUniqueWithoutSellerInput = {
    where: PropertyWhereUniqueInput
    update: XOR<PropertyUpdateWithoutSellerInput, PropertyUncheckedUpdateWithoutSellerInput>
    create: XOR<PropertyCreateWithoutSellerInput, PropertyUncheckedCreateWithoutSellerInput>
  }

  export type PropertyUpdateWithWhereUniqueWithoutSellerInput = {
    where: PropertyWhereUniqueInput
    data: XOR<PropertyUpdateWithoutSellerInput, PropertyUncheckedUpdateWithoutSellerInput>
  }

  export type PropertyUpdateManyWithWhereWithoutSellerInput = {
    where: PropertyScalarWhereInput
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyWithoutSellerInput>
  }

  export type PropertyScalarWhereInput = {
    AND?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
    OR?: PropertyScalarWhereInput[]
    NOT?: PropertyScalarWhereInput | PropertyScalarWhereInput[]
    property_id?: StringFilter<"Property"> | string
    title?: StringFilter<"Property"> | string
    sellerID?: StringFilter<"Property"> | string
    description?: StringFilter<"Property"> | string
    propertyType?: EnumPropertyTypeFilter<"Property"> | $Enums.PropertyType
    price?: FloatFilter<"Property"> | number
    brokerID?: StringNullableFilter<"Property"> | string | null
    buyerID?: StringNullableFilter<"Property"> | string | null
    createdAt?: DateTimeFilter<"Property"> | Date | string
    updatedAt?: DateTimeFilter<"Property"> | Date | string
    images?: StringNullableListFilter<"Property">
    file?: StringNullableListFilter<"Property">
    supportingDocuments?: JsonNullableFilter<"Property">
  }

  export type PropertyUpsertWithWhereUniqueWithoutBuyerInput = {
    where: PropertyWhereUniqueInput
    update: XOR<PropertyUpdateWithoutBuyerInput, PropertyUncheckedUpdateWithoutBuyerInput>
    create: XOR<PropertyCreateWithoutBuyerInput, PropertyUncheckedCreateWithoutBuyerInput>
  }

  export type PropertyUpdateWithWhereUniqueWithoutBuyerInput = {
    where: PropertyWhereUniqueInput
    data: XOR<PropertyUpdateWithoutBuyerInput, PropertyUncheckedUpdateWithoutBuyerInput>
  }

  export type PropertyUpdateManyWithWhereWithoutBuyerInput = {
    where: PropertyScalarWhereInput
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyWithoutBuyerInput>
  }

  export type BrokerUpsertWithoutUserInput = {
    update: XOR<BrokerUpdateWithoutUserInput, BrokerUncheckedUpdateWithoutUserInput>
    create: XOR<BrokerCreateWithoutUserInput, BrokerUncheckedCreateWithoutUserInput>
    where?: BrokerWhereInput
  }

  export type BrokerUpdateToOneWithWhereWithoutUserInput = {
    where?: BrokerWhereInput
    data: XOR<BrokerUpdateWithoutUserInput, BrokerUncheckedUpdateWithoutUserInput>
  }

  export type BrokerUpdateWithoutUserInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    brokerLicense?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    brokerIC?: StringFieldUpdateOperationsInput | string
    fileIC?: StringFieldUpdateOperationsInput | string
    fileBrokerLicense?: StringFieldUpdateOperationsInput | string
    propertiesListed?: PropertyUpdateManyWithoutBrokerNestedInput
  }

  export type BrokerUncheckedUpdateWithoutUserInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    brokerLicense?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    brokerIC?: StringFieldUpdateOperationsInput | string
    fileIC?: StringFieldUpdateOperationsInput | string
    fileBrokerLicense?: StringFieldUpdateOperationsInput | string
    propertiesListed?: PropertyUncheckedUpdateManyWithoutBrokerNestedInput
  }

  export type usersCreateWithoutProperties_ownedInput = {
    id?: string
    username: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    phoneNumber?: string | null
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favResidencieID?: usersCreatefavResidencieIDInput | string[]
    properties_sell?: PropertyCreateNestedManyWithoutBuyerInput
    broker?: BrokerCreateNestedOneWithoutUserInput
  }

  export type usersUncheckedCreateWithoutProperties_ownedInput = {
    id?: string
    username: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    phoneNumber?: string | null
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favResidencieID?: usersCreatefavResidencieIDInput | string[]
    properties_sell?: PropertyUncheckedCreateNestedManyWithoutBuyerInput
    broker?: BrokerUncheckedCreateNestedOneWithoutUserInput
  }

  export type usersCreateOrConnectWithoutProperties_ownedInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutProperties_ownedInput, usersUncheckedCreateWithoutProperties_ownedInput>
  }

  export type BrokerCreateWithoutPropertiesListedInput = {
    broker_id?: string
    fullName: string
    brokerLicense: string
    password: string
    brokerIC: string
    fileIC: string
    fileBrokerLicense: string
    user: usersCreateNestedOneWithoutBrokerInput
  }

  export type BrokerUncheckedCreateWithoutPropertiesListedInput = {
    broker_id?: string
    userID: string
    fullName: string
    brokerLicense: string
    password: string
    brokerIC: string
    fileIC: string
    fileBrokerLicense: string
  }

  export type BrokerCreateOrConnectWithoutPropertiesListedInput = {
    where: BrokerWhereUniqueInput
    create: XOR<BrokerCreateWithoutPropertiesListedInput, BrokerUncheckedCreateWithoutPropertiesListedInput>
  }

  export type usersCreateWithoutProperties_sellInput = {
    id?: string
    username: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    phoneNumber?: string | null
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favResidencieID?: usersCreatefavResidencieIDInput | string[]
    properties_owned?: PropertyCreateNestedManyWithoutSellerInput
    broker?: BrokerCreateNestedOneWithoutUserInput
  }

  export type usersUncheckedCreateWithoutProperties_sellInput = {
    id?: string
    username: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    phoneNumber?: string | null
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favResidencieID?: usersCreatefavResidencieIDInput | string[]
    properties_owned?: PropertyUncheckedCreateNestedManyWithoutSellerInput
    broker?: BrokerUncheckedCreateNestedOneWithoutUserInput
  }

  export type usersCreateOrConnectWithoutProperties_sellInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutProperties_sellInput, usersUncheckedCreateWithoutProperties_sellInput>
  }

  export type VehicleCreateWithoutPropertyInput = {
    vehicle_id?: string
    vehicleType: string
    brand: string
    model: string
    seats: number
    mileage: number
    ManufacturedYear: number
    cc: number
    condition: $Enums.Condition
  }

  export type VehicleUncheckedCreateWithoutPropertyInput = {
    vehicle_id?: string
    vehicleType: string
    brand: string
    model: string
    seats: number
    mileage: number
    ManufacturedYear: number
    cc: number
    condition: $Enums.Condition
  }

  export type VehicleCreateOrConnectWithoutPropertyInput = {
    where: VehicleWhereUniqueInput
    create: XOR<VehicleCreateWithoutPropertyInput, VehicleUncheckedCreateWithoutPropertyInput>
  }

  export type LandCreateWithoutPropertyInput = {
    land_id?: string
    area: string
    location: string
    land_type: string
    ownership_type: string
  }

  export type LandUncheckedCreateWithoutPropertyInput = {
    land_id?: string
    area: string
    location: string
    land_type: string
    ownership_type: string
  }

  export type LandCreateOrConnectWithoutPropertyInput = {
    where: LandWhereUniqueInput
    create: XOR<LandCreateWithoutPropertyInput, LandUncheckedCreateWithoutPropertyInput>
  }

  export type HouseCreateWithoutPropertyInput = {
    house_id?: string
    size: number
    location: string
    rooms: number
    bathrooms: number
  }

  export type HouseUncheckedCreateWithoutPropertyInput = {
    house_id?: string
    size: number
    location: string
    rooms: number
    bathrooms: number
  }

  export type HouseCreateOrConnectWithoutPropertyInput = {
    where: HouseWhereUniqueInput
    create: XOR<HouseCreateWithoutPropertyInput, HouseUncheckedCreateWithoutPropertyInput>
  }

  export type usersUpsertWithoutProperties_ownedInput = {
    update: XOR<usersUpdateWithoutProperties_ownedInput, usersUncheckedUpdateWithoutProperties_ownedInput>
    create: XOR<usersCreateWithoutProperties_ownedInput, usersUncheckedCreateWithoutProperties_ownedInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutProperties_ownedInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutProperties_ownedInput, usersUncheckedUpdateWithoutProperties_ownedInput>
  }

  export type usersUpdateWithoutProperties_ownedInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favResidencieID?: usersUpdatefavResidencieIDInput | string[]
    properties_sell?: PropertyUpdateManyWithoutBuyerNestedInput
    broker?: BrokerUpdateOneWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutProperties_ownedInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favResidencieID?: usersUpdatefavResidencieIDInput | string[]
    properties_sell?: PropertyUncheckedUpdateManyWithoutBuyerNestedInput
    broker?: BrokerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type BrokerUpsertWithoutPropertiesListedInput = {
    update: XOR<BrokerUpdateWithoutPropertiesListedInput, BrokerUncheckedUpdateWithoutPropertiesListedInput>
    create: XOR<BrokerCreateWithoutPropertiesListedInput, BrokerUncheckedCreateWithoutPropertiesListedInput>
    where?: BrokerWhereInput
  }

  export type BrokerUpdateToOneWithWhereWithoutPropertiesListedInput = {
    where?: BrokerWhereInput
    data: XOR<BrokerUpdateWithoutPropertiesListedInput, BrokerUncheckedUpdateWithoutPropertiesListedInput>
  }

  export type BrokerUpdateWithoutPropertiesListedInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    brokerLicense?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    brokerIC?: StringFieldUpdateOperationsInput | string
    fileIC?: StringFieldUpdateOperationsInput | string
    fileBrokerLicense?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneRequiredWithoutBrokerNestedInput
  }

  export type BrokerUncheckedUpdateWithoutPropertiesListedInput = {
    userID?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    brokerLicense?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    brokerIC?: StringFieldUpdateOperationsInput | string
    fileIC?: StringFieldUpdateOperationsInput | string
    fileBrokerLicense?: StringFieldUpdateOperationsInput | string
  }

  export type usersUpsertWithoutProperties_sellInput = {
    update: XOR<usersUpdateWithoutProperties_sellInput, usersUncheckedUpdateWithoutProperties_sellInput>
    create: XOR<usersCreateWithoutProperties_sellInput, usersUncheckedCreateWithoutProperties_sellInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutProperties_sellInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutProperties_sellInput, usersUncheckedUpdateWithoutProperties_sellInput>
  }

  export type usersUpdateWithoutProperties_sellInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favResidencieID?: usersUpdatefavResidencieIDInput | string[]
    properties_owned?: PropertyUpdateManyWithoutSellerNestedInput
    broker?: BrokerUpdateOneWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutProperties_sellInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favResidencieID?: usersUpdatefavResidencieIDInput | string[]
    properties_owned?: PropertyUncheckedUpdateManyWithoutSellerNestedInput
    broker?: BrokerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type VehicleUpsertWithoutPropertyInput = {
    update: XOR<VehicleUpdateWithoutPropertyInput, VehicleUncheckedUpdateWithoutPropertyInput>
    create: XOR<VehicleCreateWithoutPropertyInput, VehicleUncheckedCreateWithoutPropertyInput>
    where?: VehicleWhereInput
  }

  export type VehicleUpdateToOneWithWhereWithoutPropertyInput = {
    where?: VehicleWhereInput
    data: XOR<VehicleUpdateWithoutPropertyInput, VehicleUncheckedUpdateWithoutPropertyInput>
  }

  export type VehicleUpdateWithoutPropertyInput = {
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    seats?: IntFieldUpdateOperationsInput | number
    mileage?: IntFieldUpdateOperationsInput | number
    ManufacturedYear?: IntFieldUpdateOperationsInput | number
    cc?: IntFieldUpdateOperationsInput | number
    condition?: EnumConditionFieldUpdateOperationsInput | $Enums.Condition
  }

  export type VehicleUncheckedUpdateWithoutPropertyInput = {
    vehicleType?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    seats?: IntFieldUpdateOperationsInput | number
    mileage?: IntFieldUpdateOperationsInput | number
    ManufacturedYear?: IntFieldUpdateOperationsInput | number
    cc?: IntFieldUpdateOperationsInput | number
    condition?: EnumConditionFieldUpdateOperationsInput | $Enums.Condition
  }

  export type LandUpsertWithoutPropertyInput = {
    update: XOR<LandUpdateWithoutPropertyInput, LandUncheckedUpdateWithoutPropertyInput>
    create: XOR<LandCreateWithoutPropertyInput, LandUncheckedCreateWithoutPropertyInput>
    where?: LandWhereInput
  }

  export type LandUpdateToOneWithWhereWithoutPropertyInput = {
    where?: LandWhereInput
    data: XOR<LandUpdateWithoutPropertyInput, LandUncheckedUpdateWithoutPropertyInput>
  }

  export type LandUpdateWithoutPropertyInput = {
    area?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    land_type?: StringFieldUpdateOperationsInput | string
    ownership_type?: StringFieldUpdateOperationsInput | string
  }

  export type LandUncheckedUpdateWithoutPropertyInput = {
    area?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    land_type?: StringFieldUpdateOperationsInput | string
    ownership_type?: StringFieldUpdateOperationsInput | string
  }

  export type HouseUpsertWithoutPropertyInput = {
    update: XOR<HouseUpdateWithoutPropertyInput, HouseUncheckedUpdateWithoutPropertyInput>
    create: XOR<HouseCreateWithoutPropertyInput, HouseUncheckedCreateWithoutPropertyInput>
    where?: HouseWhereInput
  }

  export type HouseUpdateToOneWithWhereWithoutPropertyInput = {
    where?: HouseWhereInput
    data: XOR<HouseUpdateWithoutPropertyInput, HouseUncheckedUpdateWithoutPropertyInput>
  }

  export type HouseUpdateWithoutPropertyInput = {
    size?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    rooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
  }

  export type HouseUncheckedUpdateWithoutPropertyInput = {
    size?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    rooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
  }

  export type PropertyCreateWithoutVehicleInput = {
    property_id?: string
    title: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    seller: usersCreateNestedOneWithoutProperties_ownedInput
    broker?: BrokerCreateNestedOneWithoutPropertiesListedInput
    buyer?: usersCreateNestedOneWithoutProperties_sellInput
    land?: LandCreateNestedOneWithoutPropertyInput
    house?: HouseCreateNestedOneWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutVehicleInput = {
    property_id?: string
    title: string
    sellerID: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    brokerID?: string | null
    buyerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    land?: LandUncheckedCreateNestedOneWithoutPropertyInput
    house?: HouseUncheckedCreateNestedOneWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutVehicleInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutVehicleInput, PropertyUncheckedCreateWithoutVehicleInput>
  }

  export type PropertyUpsertWithoutVehicleInput = {
    update: XOR<PropertyUpdateWithoutVehicleInput, PropertyUncheckedUpdateWithoutVehicleInput>
    create: XOR<PropertyCreateWithoutVehicleInput, PropertyUncheckedCreateWithoutVehicleInput>
    where?: PropertyWhereInput
  }

  export type PropertyUpdateToOneWithWhereWithoutVehicleInput = {
    where?: PropertyWhereInput
    data: XOR<PropertyUpdateWithoutVehicleInput, PropertyUncheckedUpdateWithoutVehicleInput>
  }

  export type PropertyUpdateWithoutVehicleInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    seller?: usersUpdateOneRequiredWithoutProperties_ownedNestedInput
    broker?: BrokerUpdateOneWithoutPropertiesListedNestedInput
    buyer?: usersUpdateOneWithoutProperties_sellNestedInput
    land?: LandUpdateOneWithoutPropertyNestedInput
    house?: HouseUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateWithoutVehicleInput = {
    title?: StringFieldUpdateOperationsInput | string
    sellerID?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    brokerID?: NullableStringFieldUpdateOperationsInput | string | null
    buyerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    land?: LandUncheckedUpdateOneWithoutPropertyNestedInput
    house?: HouseUncheckedUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyCreateWithoutLandInput = {
    property_id?: string
    title: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    seller: usersCreateNestedOneWithoutProperties_ownedInput
    broker?: BrokerCreateNestedOneWithoutPropertiesListedInput
    buyer?: usersCreateNestedOneWithoutProperties_sellInput
    vehicle?: VehicleCreateNestedOneWithoutPropertyInput
    house?: HouseCreateNestedOneWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutLandInput = {
    property_id?: string
    title: string
    sellerID: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    brokerID?: string | null
    buyerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    vehicle?: VehicleUncheckedCreateNestedOneWithoutPropertyInput
    house?: HouseUncheckedCreateNestedOneWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutLandInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutLandInput, PropertyUncheckedCreateWithoutLandInput>
  }

  export type PropertyUpsertWithoutLandInput = {
    update: XOR<PropertyUpdateWithoutLandInput, PropertyUncheckedUpdateWithoutLandInput>
    create: XOR<PropertyCreateWithoutLandInput, PropertyUncheckedCreateWithoutLandInput>
    where?: PropertyWhereInput
  }

  export type PropertyUpdateToOneWithWhereWithoutLandInput = {
    where?: PropertyWhereInput
    data: XOR<PropertyUpdateWithoutLandInput, PropertyUncheckedUpdateWithoutLandInput>
  }

  export type PropertyUpdateWithoutLandInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    seller?: usersUpdateOneRequiredWithoutProperties_ownedNestedInput
    broker?: BrokerUpdateOneWithoutPropertiesListedNestedInput
    buyer?: usersUpdateOneWithoutProperties_sellNestedInput
    vehicle?: VehicleUpdateOneWithoutPropertyNestedInput
    house?: HouseUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateWithoutLandInput = {
    title?: StringFieldUpdateOperationsInput | string
    sellerID?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    brokerID?: NullableStringFieldUpdateOperationsInput | string | null
    buyerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    vehicle?: VehicleUncheckedUpdateOneWithoutPropertyNestedInput
    house?: HouseUncheckedUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyCreateWithoutHouseInput = {
    property_id?: string
    title: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    seller: usersCreateNestedOneWithoutProperties_ownedInput
    broker?: BrokerCreateNestedOneWithoutPropertiesListedInput
    buyer?: usersCreateNestedOneWithoutProperties_sellInput
    vehicle?: VehicleCreateNestedOneWithoutPropertyInput
    land?: LandCreateNestedOneWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutHouseInput = {
    property_id?: string
    title: string
    sellerID: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    brokerID?: string | null
    buyerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    vehicle?: VehicleUncheckedCreateNestedOneWithoutPropertyInput
    land?: LandUncheckedCreateNestedOneWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutHouseInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutHouseInput, PropertyUncheckedCreateWithoutHouseInput>
  }

  export type PropertyUpsertWithoutHouseInput = {
    update: XOR<PropertyUpdateWithoutHouseInput, PropertyUncheckedUpdateWithoutHouseInput>
    create: XOR<PropertyCreateWithoutHouseInput, PropertyUncheckedCreateWithoutHouseInput>
    where?: PropertyWhereInput
  }

  export type PropertyUpdateToOneWithWhereWithoutHouseInput = {
    where?: PropertyWhereInput
    data: XOR<PropertyUpdateWithoutHouseInput, PropertyUncheckedUpdateWithoutHouseInput>
  }

  export type PropertyUpdateWithoutHouseInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    seller?: usersUpdateOneRequiredWithoutProperties_ownedNestedInput
    broker?: BrokerUpdateOneWithoutPropertiesListedNestedInput
    buyer?: usersUpdateOneWithoutProperties_sellNestedInput
    vehicle?: VehicleUpdateOneWithoutPropertyNestedInput
    land?: LandUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateWithoutHouseInput = {
    title?: StringFieldUpdateOperationsInput | string
    sellerID?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    brokerID?: NullableStringFieldUpdateOperationsInput | string | null
    buyerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    vehicle?: VehicleUncheckedUpdateOneWithoutPropertyNestedInput
    land?: LandUncheckedUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyCreateWithoutBrokerInput = {
    property_id?: string
    title: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    seller: usersCreateNestedOneWithoutProperties_ownedInput
    buyer?: usersCreateNestedOneWithoutProperties_sellInput
    vehicle?: VehicleCreateNestedOneWithoutPropertyInput
    land?: LandCreateNestedOneWithoutPropertyInput
    house?: HouseCreateNestedOneWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutBrokerInput = {
    property_id?: string
    title: string
    sellerID: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    buyerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
    vehicle?: VehicleUncheckedCreateNestedOneWithoutPropertyInput
    land?: LandUncheckedCreateNestedOneWithoutPropertyInput
    house?: HouseUncheckedCreateNestedOneWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutBrokerInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutBrokerInput, PropertyUncheckedCreateWithoutBrokerInput>
  }

  export type PropertyCreateManyBrokerInputEnvelope = {
    data: PropertyCreateManyBrokerInput | PropertyCreateManyBrokerInput[]
  }

  export type usersCreateWithoutBrokerInput = {
    id?: string
    username: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    phoneNumber?: string | null
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favResidencieID?: usersCreatefavResidencieIDInput | string[]
    properties_owned?: PropertyCreateNestedManyWithoutSellerInput
    properties_sell?: PropertyCreateNestedManyWithoutBuyerInput
  }

  export type usersUncheckedCreateWithoutBrokerInput = {
    id?: string
    username: string
    firstName?: string | null
    lastName?: string | null
    email: string
    password: string
    phoneNumber?: string | null
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favResidencieID?: usersCreatefavResidencieIDInput | string[]
    properties_owned?: PropertyUncheckedCreateNestedManyWithoutSellerInput
    properties_sell?: PropertyUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type usersCreateOrConnectWithoutBrokerInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutBrokerInput, usersUncheckedCreateWithoutBrokerInput>
  }

  export type PropertyUpsertWithWhereUniqueWithoutBrokerInput = {
    where: PropertyWhereUniqueInput
    update: XOR<PropertyUpdateWithoutBrokerInput, PropertyUncheckedUpdateWithoutBrokerInput>
    create: XOR<PropertyCreateWithoutBrokerInput, PropertyUncheckedCreateWithoutBrokerInput>
  }

  export type PropertyUpdateWithWhereUniqueWithoutBrokerInput = {
    where: PropertyWhereUniqueInput
    data: XOR<PropertyUpdateWithoutBrokerInput, PropertyUncheckedUpdateWithoutBrokerInput>
  }

  export type PropertyUpdateManyWithWhereWithoutBrokerInput = {
    where: PropertyScalarWhereInput
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyWithoutBrokerInput>
  }

  export type usersUpsertWithoutBrokerInput = {
    update: XOR<usersUpdateWithoutBrokerInput, usersUncheckedUpdateWithoutBrokerInput>
    create: XOR<usersCreateWithoutBrokerInput, usersUncheckedCreateWithoutBrokerInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutBrokerInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutBrokerInput, usersUncheckedUpdateWithoutBrokerInput>
  }

  export type usersUpdateWithoutBrokerInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favResidencieID?: usersUpdatefavResidencieIDInput | string[]
    properties_owned?: PropertyUpdateManyWithoutSellerNestedInput
    properties_sell?: PropertyUpdateManyWithoutBuyerNestedInput
  }

  export type usersUncheckedUpdateWithoutBrokerInput = {
    username?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favResidencieID?: usersUpdatefavResidencieIDInput | string[]
    properties_owned?: PropertyUncheckedUpdateManyWithoutSellerNestedInput
    properties_sell?: PropertyUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type PropertyCreateManySellerInput = {
    property_id?: string
    title: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    brokerID?: string | null
    buyerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
  }

  export type PropertyCreateManyBuyerInput = {
    property_id?: string
    title: string
    sellerID: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    brokerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
  }

  export type PropertyUpdateWithoutSellerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    broker?: BrokerUpdateOneWithoutPropertiesListedNestedInput
    buyer?: usersUpdateOneWithoutProperties_sellNestedInput
    vehicle?: VehicleUpdateOneWithoutPropertyNestedInput
    land?: LandUpdateOneWithoutPropertyNestedInput
    house?: HouseUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateWithoutSellerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    brokerID?: NullableStringFieldUpdateOperationsInput | string | null
    buyerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    vehicle?: VehicleUncheckedUpdateOneWithoutPropertyNestedInput
    land?: LandUncheckedUpdateOneWithoutPropertyNestedInput
    house?: HouseUncheckedUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateManyWithoutSellerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    brokerID?: NullableStringFieldUpdateOperationsInput | string | null
    buyerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
  }

  export type PropertyUpdateWithoutBuyerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    seller?: usersUpdateOneRequiredWithoutProperties_ownedNestedInput
    broker?: BrokerUpdateOneWithoutPropertiesListedNestedInput
    vehicle?: VehicleUpdateOneWithoutPropertyNestedInput
    land?: LandUpdateOneWithoutPropertyNestedInput
    house?: HouseUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateWithoutBuyerInput = {
    title?: StringFieldUpdateOperationsInput | string
    sellerID?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    brokerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    vehicle?: VehicleUncheckedUpdateOneWithoutPropertyNestedInput
    land?: LandUncheckedUpdateOneWithoutPropertyNestedInput
    house?: HouseUncheckedUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateManyWithoutBuyerInput = {
    title?: StringFieldUpdateOperationsInput | string
    sellerID?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    brokerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
  }

  export type PropertyCreateManyBrokerInput = {
    property_id?: string
    title: string
    sellerID: string
    description: string
    propertyType: $Enums.PropertyType
    price: number
    buyerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: PropertyCreateimagesInput | string[]
    file?: PropertyCreatefileInput | string[]
    supportingDocuments?: InputJsonValue | null
  }

  export type PropertyUpdateWithoutBrokerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    seller?: usersUpdateOneRequiredWithoutProperties_ownedNestedInput
    buyer?: usersUpdateOneWithoutProperties_sellNestedInput
    vehicle?: VehicleUpdateOneWithoutPropertyNestedInput
    land?: LandUpdateOneWithoutPropertyNestedInput
    house?: HouseUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateWithoutBrokerInput = {
    title?: StringFieldUpdateOperationsInput | string
    sellerID?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    buyerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
    vehicle?: VehicleUncheckedUpdateOneWithoutPropertyNestedInput
    land?: LandUncheckedUpdateOneWithoutPropertyNestedInput
    house?: HouseUncheckedUpdateOneWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateManyWithoutBrokerInput = {
    title?: StringFieldUpdateOperationsInput | string
    sellerID?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    propertyType?: EnumPropertyTypeFieldUpdateOperationsInput | $Enums.PropertyType
    price?: FloatFieldUpdateOperationsInput | number
    buyerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: PropertyUpdateimagesInput | string[]
    file?: PropertyUpdatefileInput | string[]
    supportingDocuments?: InputJsonValue | InputJsonValue | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BrokerCountOutputTypeDefaultArgs instead
     */
    export type BrokerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BrokerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PropertyDefaultArgs instead
     */
    export type PropertyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PropertyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VehicleDefaultArgs instead
     */
    export type VehicleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VehicleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LandDefaultArgs instead
     */
    export type LandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LandDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HouseDefaultArgs instead
     */
    export type HouseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HouseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BrokerDefaultArgs instead
     */
    export type BrokerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BrokerDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}